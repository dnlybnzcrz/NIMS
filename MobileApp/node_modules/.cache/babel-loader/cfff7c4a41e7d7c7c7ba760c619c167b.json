{"ast":null,"code":"import _asyncToGenerator from \"C:\\\\Users\\\\User\\\\Desktop\\\\NIMS\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _objectWithoutProperties from \"C:\\\\Users\\\\User\\\\Desktop\\\\NIMS\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectWithoutProperties\";\nimport _get from \"C:\\\\Users\\\\User\\\\Desktop\\\\NIMS\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/get\";\nimport _wrapNativeSuper from \"C:\\\\Users\\\\User\\\\Desktop\\\\NIMS\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/wrapNativeSuper\";\nimport _defineProperty from \"C:\\\\Users\\\\User\\\\Desktop\\\\NIMS\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\User\\\\Desktop\\\\NIMS\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\User\\\\Desktop\\\\NIMS\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\User\\\\Desktop\\\\NIMS\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _toConsumableArray from \"C:\\\\Users\\\\User\\\\Desktop\\\\NIMS\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _createClass from \"C:\\\\Users\\\\User\\\\Desktop\\\\NIMS\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _classCallCheck from \"C:\\\\Users\\\\User\\\\Desktop\\\\NIMS\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _objectSpread from \"C:\\\\Users\\\\User\\\\Desktop\\\\NIMS\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"C:\\\\Users\\\\User\\\\Desktop\\\\NIMS\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = \"function\" == typeof Symbol ? Symbol : {}, a = i.iterator || \"@@iterator\", c = i.asyncIterator || \"@@asyncIterator\", u = i.toStringTag || \"@@toStringTag\"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, \"\"); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, \"_invoke\", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: \"normal\", arg: t.call(e, r) }; } catch (t) { return { type: \"throw\", arg: t }; } } e.wrap = wrap; var h = \"suspendedStart\", l = \"suspendedYield\", f = \"executing\", s = \"completed\", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { [\"next\", \"throw\", \"return\"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if (\"throw\" !== c.type) { var u = c.arg, h = u.value; return h && \"object\" == typeof h && n.call(h, \"__await\") ? e.resolve(h.__await).then(function (t) { invoke(\"next\", t, i, a); }, function (t) { invoke(\"throw\", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke(\"throw\", t, i, a); }); } a(c.arg); } var r; o(this, \"_invoke\", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error(\"Generator is already running\"); if (o === s) { if (\"throw\" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if (\"next\" === n.method) n.sent = n._sent = n.arg;else if (\"throw\" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else \"return\" === n.method && n.abrupt(\"return\", n.arg); o = f; var p = tryCatch(e, r, n); if (\"normal\" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } \"throw\" === p.type && (o = s, n.method = \"throw\", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, \"throw\" === n && e.iterator.return && (r.method = \"return\", r.arg = t, maybeInvokeDelegate(e, r), \"throw\" === r.method) || \"return\" !== n && (r.method = \"throw\", r.arg = new TypeError(\"The iterator does not provide a '\" + n + \"' method\")), y; var i = tryCatch(o, e.iterator, r.arg); if (\"throw\" === i.type) return r.method = \"throw\", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, \"return\" !== r.method && (r.method = \"next\", r.arg = t), r.delegate = null, y) : a : (r.method = \"throw\", r.arg = new TypeError(\"iterator result is not an object\"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = \"normal\", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: \"root\" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || \"\" === e) { var r = e[a]; if (r) return r.call(e); if (\"function\" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(typeof e + \" is not iterable\"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, \"GeneratorFunction\"), e.isGeneratorFunction = function (t) { var e = \"function\" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || \"GeneratorFunction\" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, \"GeneratorFunction\")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, \"Generator\"), define(g, a, function () { return this; }), define(g, \"toString\", function () { return \"[object Generator]\"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) \"t\" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if (\"throw\" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = \"throw\", a.arg = e, r.next = n, o && (r.method = \"next\", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if (\"root\" === i.tryLoc) return handle(\"end\"); if (i.tryLoc <= this.prev) { var c = n.call(i, \"catchLoc\"), u = n.call(i, \"finallyLoc\"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error(\"try statement without catch or finally\"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, \"finallyLoc\") && this.prev < o.finallyLoc) { var i = o; break; } } i && (\"break\" === t || \"continue\" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = \"next\", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if (\"throw\" === t.type) throw t.arg; return \"break\" === t.type || \"continue\" === t.type ? this.next = t.arg : \"return\" === t.type ? (this.rval = this.arg = t.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, catch: function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if (\"throw\" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, \"next\" === this.method && (this.arg = t), y; } }, e; }\nfunction _superPropGet(t, e, o, r) { var p = _get(_getPrototypeOf(1 & r ? t.prototype : t), e, o); return 2 & r && \"function\" == typeof p ? function (t) { return p.apply(o, t); } : p; }\nfunction _createForOfIteratorHelper(r, e) { var t = \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && \"number\" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t.return || t.return(); } finally { if (u) throw o; } } }; }\nfunction _unsupportedIterableToArray(r, a) { if (r) { if (\"string\" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }\nfunction _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\nimport React, { createContext, useContext, useEffect, useState, useCallback, useMemo, useRef, useReducer, memo, cloneElement, forwardRef } from 'react';\nimport { createPortal, unstable_batchedUpdates } from 'react-dom';\nimport { useUniqueId, getEventCoordinates, getWindow, isDocument, isHTMLElement, isSVGElement, canUseDOM, isWindow, isNode, getOwnerDocument, add, isKeyboardEvent, subtract, useLazyMemo, useInterval, usePrevious, useLatestValue, useEvent, useIsomorphicLayoutEffect, useNodeRef, findFirstFocusableNode, CSS } from '@dnd-kit/utilities';\nimport { useAnnouncement, HiddenText, LiveRegion } from '@dnd-kit/accessibility';\nvar DndMonitorContext = /*#__PURE__*/createContext(null);\nfunction useDndMonitor(listener) {\n  var registerListener = useContext(DndMonitorContext);\n  useEffect(function () {\n    if (!registerListener) {\n      throw new Error('useDndMonitor must be used within a children of <DndContext>');\n    }\n    var unsubscribe = registerListener(listener);\n    return unsubscribe;\n  }, [listener, registerListener]);\n}\nfunction useDndMonitorProvider() {\n  var _useState = useState(function () {\n      return new Set();\n    }),\n    _useState2 = _slicedToArray(_useState, 1),\n    listeners = _useState2[0];\n  var registerListener = useCallback(function (listener) {\n    listeners.add(listener);\n    return function () {\n      return listeners.delete(listener);\n    };\n  }, [listeners]);\n  var dispatch = useCallback(function (_ref) {\n    var type = _ref.type,\n      event = _ref.event;\n    listeners.forEach(function (listener) {\n      var _listener$type;\n      return (_listener$type = listener[type]) == null ? void 0 : _listener$type.call(listener, event);\n    });\n  }, [listeners]);\n  return [dispatch, registerListener];\n}\nvar defaultScreenReaderInstructions = {\n  draggable: \"\\n    To pick up a draggable item, press the space bar.\\n    While dragging, use the arrow keys to move the item.\\n    Press space again to drop the item in its new position, or press escape to cancel.\\n  \"\n};\nvar defaultAnnouncements = {\n  onDragStart: function onDragStart(_ref) {\n    var active = _ref.active;\n    return \"Picked up draggable item \" + active.id + \".\";\n  },\n  onDragOver: function onDragOver(_ref2) {\n    var active = _ref2.active,\n      over = _ref2.over;\n    if (over) {\n      return \"Draggable item \" + active.id + \" was moved over droppable area \" + over.id + \".\";\n    }\n    return \"Draggable item \" + active.id + \" is no longer over a droppable area.\";\n  },\n  onDragEnd: function onDragEnd(_ref3) {\n    var active = _ref3.active,\n      over = _ref3.over;\n    if (over) {\n      return \"Draggable item \" + active.id + \" was dropped over droppable area \" + over.id;\n    }\n    return \"Draggable item \" + active.id + \" was dropped.\";\n  },\n  onDragCancel: function onDragCancel(_ref4) {\n    var active = _ref4.active;\n    return \"Dragging was cancelled. Draggable item \" + active.id + \" was dropped.\";\n  }\n};\nfunction Accessibility(_ref) {\n  var _ref$announcements = _ref.announcements,\n    announcements = _ref$announcements === void 0 ? defaultAnnouncements : _ref$announcements,\n    container = _ref.container,\n    hiddenTextDescribedById = _ref.hiddenTextDescribedById,\n    _ref$screenReaderInst = _ref.screenReaderInstructions,\n    screenReaderInstructions = _ref$screenReaderInst === void 0 ? defaultScreenReaderInstructions : _ref$screenReaderInst;\n  var _useAnnouncement = useAnnouncement(),\n    announce = _useAnnouncement.announce,\n    announcement = _useAnnouncement.announcement;\n  var liveRegionId = useUniqueId(\"DndLiveRegion\");\n  var _useState3 = useState(false),\n    _useState4 = _slicedToArray(_useState3, 2),\n    mounted = _useState4[0],\n    setMounted = _useState4[1];\n  useEffect(function () {\n    setMounted(true);\n  }, []);\n  useDndMonitor(useMemo(function () {\n    return {\n      onDragStart: function onDragStart(_ref2) {\n        var active = _ref2.active;\n        announce(announcements.onDragStart({\n          active: active\n        }));\n      },\n      onDragMove: function onDragMove(_ref3) {\n        var active = _ref3.active,\n          over = _ref3.over;\n        if (announcements.onDragMove) {\n          announce(announcements.onDragMove({\n            active: active,\n            over: over\n          }));\n        }\n      },\n      onDragOver: function onDragOver(_ref4) {\n        var active = _ref4.active,\n          over = _ref4.over;\n        announce(announcements.onDragOver({\n          active: active,\n          over: over\n        }));\n      },\n      onDragEnd: function onDragEnd(_ref5) {\n        var active = _ref5.active,\n          over = _ref5.over;\n        announce(announcements.onDragEnd({\n          active: active,\n          over: over\n        }));\n      },\n      onDragCancel: function onDragCancel(_ref6) {\n        var active = _ref6.active,\n          over = _ref6.over;\n        announce(announcements.onDragCancel({\n          active: active,\n          over: over\n        }));\n      }\n    };\n  }, [announce, announcements]));\n  if (!mounted) {\n    return null;\n  }\n  var markup = React.createElement(React.Fragment, null, React.createElement(HiddenText, {\n    id: hiddenTextDescribedById,\n    value: screenReaderInstructions.draggable\n  }), React.createElement(LiveRegion, {\n    id: liveRegionId,\n    announcement: announcement\n  }));\n  return container ? createPortal(markup, container) : markup;\n}\nvar Action;\n(function (Action) {\n  Action[\"DragStart\"] = \"dragStart\";\n  Action[\"DragMove\"] = \"dragMove\";\n  Action[\"DragEnd\"] = \"dragEnd\";\n  Action[\"DragCancel\"] = \"dragCancel\";\n  Action[\"DragOver\"] = \"dragOver\";\n  Action[\"RegisterDroppable\"] = \"registerDroppable\";\n  Action[\"SetDroppableDisabled\"] = \"setDroppableDisabled\";\n  Action[\"UnregisterDroppable\"] = \"unregisterDroppable\";\n})(Action || (Action = {}));\nfunction noop() {}\nfunction useSensor(sensor, options) {\n  return useMemo(function () {\n    return {\n      sensor: sensor,\n      options: options != null ? options : {}\n    };\n  },\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  [sensor, options]);\n}\nfunction useSensors() {\n  for (var _len = arguments.length, sensors = new Array(_len), _key = 0; _key < _len; _key++) {\n    sensors[_key] = arguments[_key];\n  }\n  return useMemo(function () {\n    return [].concat(sensors).filter(function (sensor) {\n      return sensor != null;\n    });\n  }, // eslint-disable-next-line react-hooks/exhaustive-deps\n  [].concat(sensors));\n}\nvar defaultCoordinates = /*#__PURE__*/Object.freeze({\n  x: 0,\n  y: 0\n});\n\n/**\r\n * Returns the distance between two points\r\n */\nfunction distanceBetween(p1, p2) {\n  return Math.sqrt(Math.pow(p1.x - p2.x, 2) + Math.pow(p1.y - p2.y, 2));\n}\nfunction getRelativeTransformOrigin(event, rect) {\n  var eventCoordinates = getEventCoordinates(event);\n  if (!eventCoordinates) {\n    return '0 0';\n  }\n  var transformOrigin = {\n    x: (eventCoordinates.x - rect.left) / rect.width * 100,\n    y: (eventCoordinates.y - rect.top) / rect.height * 100\n  };\n  return transformOrigin.x + \"% \" + transformOrigin.y + \"%\";\n}\n\n/**\r\n * Sort collisions from smallest to greatest value\r\n */\nfunction sortCollisionsAsc(_ref, _ref2) {\n  var a = _ref.data.value;\n  var b = _ref2.data.value;\n  return a - b;\n}\n/**\r\n * Sort collisions from greatest to smallest value\r\n */\n\nfunction sortCollisionsDesc(_ref3, _ref4) {\n  var a = _ref3.data.value;\n  var b = _ref4.data.value;\n  return b - a;\n}\n/**\r\n * Returns the coordinates of the corners of a given rectangle:\r\n * [TopLeft {x, y}, TopRight {x, y}, BottomLeft {x, y}, BottomRight {x, y}]\r\n */\n\nfunction cornersOfRectangle(_ref5) {\n  var left = _ref5.left,\n    top = _ref5.top,\n    height = _ref5.height,\n    width = _ref5.width;\n  return [{\n    x: left,\n    y: top\n  }, {\n    x: left + width,\n    y: top\n  }, {\n    x: left,\n    y: top + height\n  }, {\n    x: left + width,\n    y: top + height\n  }];\n}\nfunction getFirstCollision(collisions, property) {\n  if (!collisions || collisions.length === 0) {\n    return null;\n  }\n  var _collisions = _slicedToArray(collisions, 1),\n    firstCollision = _collisions[0];\n  return property ? firstCollision[property] : firstCollision;\n}\n\n/**\r\n * Returns the coordinates of the center of a given ClientRect\r\n */\n\nfunction centerOfRectangle(rect, left, top) {\n  if (left === void 0) {\n    left = rect.left;\n  }\n  if (top === void 0) {\n    top = rect.top;\n  }\n  return {\n    x: left + rect.width * 0.5,\n    y: top + rect.height * 0.5\n  };\n}\n/**\r\n * Returns the closest rectangles from an array of rectangles to the center of a given\r\n * rectangle.\r\n */\n\nvar closestCenter = function closestCenter(_ref) {\n  var collisionRect = _ref.collisionRect,\n    droppableRects = _ref.droppableRects,\n    droppableContainers = _ref.droppableContainers;\n  var centerRect = centerOfRectangle(collisionRect, collisionRect.left, collisionRect.top);\n  var collisions = [];\n  var _iterator = _createForOfIteratorHelper(droppableContainers),\n    _step;\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var droppableContainer = _step.value;\n      var id = droppableContainer.id;\n      var rect = droppableRects.get(id);\n      if (rect) {\n        var distBetween = distanceBetween(centerOfRectangle(rect), centerRect);\n        collisions.push({\n          id: id,\n          data: {\n            droppableContainer: droppableContainer,\n            value: distBetween\n          }\n        });\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n  return collisions.sort(sortCollisionsAsc);\n};\n\n/**\r\n * Returns the closest rectangles from an array of rectangles to the corners of\r\n * another rectangle.\r\n */\n\nvar closestCorners = function closestCorners(_ref) {\n  var collisionRect = _ref.collisionRect,\n    droppableRects = _ref.droppableRects,\n    droppableContainers = _ref.droppableContainers;\n  var corners = cornersOfRectangle(collisionRect);\n  var collisions = [];\n  var _iterator2 = _createForOfIteratorHelper(droppableContainers),\n    _step2;\n  try {\n    var _loop = function _loop() {\n      var droppableContainer = _step2.value;\n      var id = droppableContainer.id;\n      var rect = droppableRects.get(id);\n      if (rect) {\n        var rectCorners = cornersOfRectangle(rect);\n        var distances = corners.reduce(function (accumulator, corner, index) {\n          return accumulator + distanceBetween(rectCorners[index], corner);\n        }, 0);\n        var effectiveDistance = Number((distances / 4).toFixed(4));\n        collisions.push({\n          id: id,\n          data: {\n            droppableContainer: droppableContainer,\n            value: effectiveDistance\n          }\n        });\n      }\n    };\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      _loop();\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n  return collisions.sort(sortCollisionsAsc);\n};\n\n/**\r\n * Returns the intersecting rectangle area between two rectangles\r\n */\n\nfunction getIntersectionRatio(entry, target) {\n  var top = Math.max(target.top, entry.top);\n  var left = Math.max(target.left, entry.left);\n  var right = Math.min(target.left + target.width, entry.left + entry.width);\n  var bottom = Math.min(target.top + target.height, entry.top + entry.height);\n  var width = right - left;\n  var height = bottom - top;\n  if (left < right && top < bottom) {\n    var targetArea = target.width * target.height;\n    var entryArea = entry.width * entry.height;\n    var intersectionArea = width * height;\n    var intersectionRatio = intersectionArea / (targetArea + entryArea - intersectionArea);\n    return Number(intersectionRatio.toFixed(4));\n  } // Rectangles do not overlap, or overlap has an area of zero (edge/corner overlap)\n\n  return 0;\n}\n/**\r\n * Returns the rectangles that has the greatest intersection area with a given\r\n * rectangle in an array of rectangles.\r\n */\n\nvar rectIntersection = function rectIntersection(_ref) {\n  var collisionRect = _ref.collisionRect,\n    droppableRects = _ref.droppableRects,\n    droppableContainers = _ref.droppableContainers;\n  var collisions = [];\n  var _iterator3 = _createForOfIteratorHelper(droppableContainers),\n    _step3;\n  try {\n    for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n      var droppableContainer = _step3.value;\n      var id = droppableContainer.id;\n      var rect = droppableRects.get(id);\n      if (rect) {\n        var intersectionRatio = getIntersectionRatio(rect, collisionRect);\n        if (intersectionRatio > 0) {\n          collisions.push({\n            id: id,\n            data: {\n              droppableContainer: droppableContainer,\n              value: intersectionRatio\n            }\n          });\n        }\n      }\n    }\n  } catch (err) {\n    _iterator3.e(err);\n  } finally {\n    _iterator3.f();\n  }\n  return collisions.sort(sortCollisionsDesc);\n};\n\n/**\r\n * Check if a given point is contained within a bounding rectangle\r\n */\n\nfunction isPointWithinRect(point, rect) {\n  var top = rect.top,\n    left = rect.left,\n    bottom = rect.bottom,\n    right = rect.right;\n  return top <= point.y && point.y <= bottom && left <= point.x && point.x <= right;\n}\n/**\r\n * Returns the rectangles that the pointer is hovering over\r\n */\n\nvar pointerWithin = function pointerWithin(_ref) {\n  var droppableContainers = _ref.droppableContainers,\n    droppableRects = _ref.droppableRects,\n    pointerCoordinates = _ref.pointerCoordinates;\n  if (!pointerCoordinates) {\n    return [];\n  }\n  var collisions = [];\n  var _iterator4 = _createForOfIteratorHelper(droppableContainers),\n    _step4;\n  try {\n    for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n      var droppableContainer = _step4.value;\n      var id = droppableContainer.id;\n      var rect = droppableRects.get(id);\n      if (rect && isPointWithinRect(pointerCoordinates, rect)) {\n        /* There may be more than a single rectangle intersecting\r\n         * with the pointer coordinates. In order to sort the\r\n         * colliding rectangles, we measure the distance between\r\n         * the pointer and the corners of the intersecting rectangle\r\n         */\n        var corners = cornersOfRectangle(rect);\n        var distances = corners.reduce(function (accumulator, corner) {\n          return accumulator + distanceBetween(pointerCoordinates, corner);\n        }, 0);\n        var effectiveDistance = Number((distances / 4).toFixed(4));\n        collisions.push({\n          id: id,\n          data: {\n            droppableContainer: droppableContainer,\n            value: effectiveDistance\n          }\n        });\n      }\n    }\n  } catch (err) {\n    _iterator4.e(err);\n  } finally {\n    _iterator4.f();\n  }\n  return collisions.sort(sortCollisionsAsc);\n};\nfunction adjustScale(transform, rect1, rect2) {\n  return _objectSpread({}, transform, {\n    scaleX: rect1 && rect2 ? rect1.width / rect2.width : 1,\n    scaleY: rect1 && rect2 ? rect1.height / rect2.height : 1\n  });\n}\nfunction getRectDelta(rect1, rect2) {\n  return rect1 && rect2 ? {\n    x: rect1.left - rect2.left,\n    y: rect1.top - rect2.top\n  } : defaultCoordinates;\n}\nfunction createRectAdjustmentFn(modifier) {\n  return function adjustClientRect(rect) {\n    for (var _len = arguments.length, adjustments = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      adjustments[_key - 1] = arguments[_key];\n    }\n    return adjustments.reduce(function (acc, adjustment) {\n      return _objectSpread({}, acc, {\n        top: acc.top + modifier * adjustment.y,\n        bottom: acc.bottom + modifier * adjustment.y,\n        left: acc.left + modifier * adjustment.x,\n        right: acc.right + modifier * adjustment.x\n      });\n    }, _objectSpread({}, rect));\n  };\n}\nvar getAdjustedRect = /*#__PURE__*/createRectAdjustmentFn(1);\nfunction parseTransform(transform) {\n  if (transform.startsWith('matrix3d(')) {\n    var transformArray = transform.slice(9, -1).split(/, /);\n    return {\n      x: +transformArray[12],\n      y: +transformArray[13],\n      scaleX: +transformArray[0],\n      scaleY: +transformArray[5]\n    };\n  } else if (transform.startsWith('matrix(')) {\n    var _transformArray = transform.slice(7, -1).split(/, /);\n    return {\n      x: +_transformArray[4],\n      y: +_transformArray[5],\n      scaleX: +_transformArray[0],\n      scaleY: +_transformArray[3]\n    };\n  }\n  return null;\n}\nfunction inverseTransform(rect, transform, transformOrigin) {\n  var parsedTransform = parseTransform(transform);\n  if (!parsedTransform) {\n    return rect;\n  }\n  var scaleX = parsedTransform.scaleX,\n    scaleY = parsedTransform.scaleY,\n    translateX = parsedTransform.x,\n    translateY = parsedTransform.y;\n  var x = rect.left - translateX - (1 - scaleX) * parseFloat(transformOrigin);\n  var y = rect.top - translateY - (1 - scaleY) * parseFloat(transformOrigin.slice(transformOrigin.indexOf(' ') + 1));\n  var w = scaleX ? rect.width / scaleX : rect.width;\n  var h = scaleY ? rect.height / scaleY : rect.height;\n  return {\n    width: w,\n    height: h,\n    top: y,\n    right: x + w,\n    bottom: y + h,\n    left: x\n  };\n}\nvar defaultOptions = {\n  ignoreTransform: false\n};\n/**\r\n * Returns the bounding client rect of an element relative to the viewport.\r\n */\n\nfunction getClientRect(element, options) {\n  if (options === void 0) {\n    options = defaultOptions;\n  }\n  var rect = element.getBoundingClientRect();\n  if (options.ignoreTransform) {\n    var _getWindow$getCompute = getWindow(element).getComputedStyle(element),\n      transform = _getWindow$getCompute.transform,\n      transformOrigin = _getWindow$getCompute.transformOrigin;\n    if (transform) {\n      rect = inverseTransform(rect, transform, transformOrigin);\n    }\n  }\n  var _rect = rect,\n    top = _rect.top,\n    left = _rect.left,\n    width = _rect.width,\n    height = _rect.height,\n    bottom = _rect.bottom,\n    right = _rect.right;\n  return {\n    top: top,\n    left: left,\n    width: width,\n    height: height,\n    bottom: bottom,\n    right: right\n  };\n}\n/**\r\n * Returns the bounding client rect of an element relative to the viewport.\r\n *\r\n * @remarks\r\n * The ClientRect returned by this method does not take into account transforms\r\n * applied to the element it measures.\r\n *\r\n */\n\nfunction getTransformAgnosticClientRect(element) {\n  return getClientRect(element, {\n    ignoreTransform: true\n  });\n}\nfunction getWindowClientRect(element) {\n  var width = element.innerWidth;\n  var height = element.innerHeight;\n  return {\n    top: 0,\n    left: 0,\n    right: width,\n    bottom: height,\n    width: width,\n    height: height\n  };\n}\nfunction isFixed(node, computedStyle) {\n  if (computedStyle === void 0) {\n    computedStyle = getWindow(node).getComputedStyle(node);\n  }\n  return computedStyle.position === 'fixed';\n}\nfunction isScrollable(element, computedStyle) {\n  if (computedStyle === void 0) {\n    computedStyle = getWindow(element).getComputedStyle(element);\n  }\n  var overflowRegex = /(auto|scroll|overlay)/;\n  var properties = ['overflow', 'overflowX', 'overflowY'];\n  return properties.some(function (property) {\n    var value = computedStyle[property];\n    return typeof value === 'string' ? overflowRegex.test(value) : false;\n  });\n}\nfunction getScrollableAncestors(element, limit) {\n  var scrollParents = [];\n  function findScrollableAncestors(node) {\n    if (limit != null && scrollParents.length >= limit) {\n      return scrollParents;\n    }\n    if (!node) {\n      return scrollParents;\n    }\n    if (isDocument(node) && node.scrollingElement != null && !scrollParents.includes(node.scrollingElement)) {\n      scrollParents.push(node.scrollingElement);\n      return scrollParents;\n    }\n    if (!isHTMLElement(node) || isSVGElement(node)) {\n      return scrollParents;\n    }\n    if (scrollParents.includes(node)) {\n      return scrollParents;\n    }\n    var computedStyle = getWindow(element).getComputedStyle(node);\n    if (node !== element) {\n      if (isScrollable(node, computedStyle)) {\n        scrollParents.push(node);\n      }\n    }\n    if (isFixed(node, computedStyle)) {\n      return scrollParents;\n    }\n    return findScrollableAncestors(node.parentNode);\n  }\n  if (!element) {\n    return scrollParents;\n  }\n  return findScrollableAncestors(element);\n}\nfunction getFirstScrollableAncestor(node) {\n  var _getScrollableAncesto = getScrollableAncestors(node, 1),\n    _getScrollableAncesto2 = _slicedToArray(_getScrollableAncesto, 1),\n    firstScrollableAncestor = _getScrollableAncesto2[0];\n  return firstScrollableAncestor != null ? firstScrollableAncestor : null;\n}\nfunction getScrollableElement(element) {\n  if (!canUseDOM || !element) {\n    return null;\n  }\n  if (isWindow(element)) {\n    return element;\n  }\n  if (!isNode(element)) {\n    return null;\n  }\n  if (isDocument(element) || element === getOwnerDocument(element).scrollingElement) {\n    return window;\n  }\n  if (isHTMLElement(element)) {\n    return element;\n  }\n  return null;\n}\nfunction getScrollXCoordinate(element) {\n  if (isWindow(element)) {\n    return element.scrollX;\n  }\n  return element.scrollLeft;\n}\nfunction getScrollYCoordinate(element) {\n  if (isWindow(element)) {\n    return element.scrollY;\n  }\n  return element.scrollTop;\n}\nfunction getScrollCoordinates(element) {\n  return {\n    x: getScrollXCoordinate(element),\n    y: getScrollYCoordinate(element)\n  };\n}\nvar Direction;\n(function (Direction) {\n  Direction[Direction[\"Forward\"] = 1] = \"Forward\";\n  Direction[Direction[\"Backward\"] = -1] = \"Backward\";\n})(Direction || (Direction = {}));\nfunction isDocumentScrollingElement(element) {\n  if (!canUseDOM || !element) {\n    return false;\n  }\n  return element === document.scrollingElement;\n}\nfunction getScrollPosition(scrollingContainer) {\n  var minScroll = {\n    x: 0,\n    y: 0\n  };\n  var dimensions = isDocumentScrollingElement(scrollingContainer) ? {\n    height: window.innerHeight,\n    width: window.innerWidth\n  } : {\n    height: scrollingContainer.clientHeight,\n    width: scrollingContainer.clientWidth\n  };\n  var maxScroll = {\n    x: scrollingContainer.scrollWidth - dimensions.width,\n    y: scrollingContainer.scrollHeight - dimensions.height\n  };\n  var isTop = scrollingContainer.scrollTop <= minScroll.y;\n  var isLeft = scrollingContainer.scrollLeft <= minScroll.x;\n  var isBottom = scrollingContainer.scrollTop >= maxScroll.y;\n  var isRight = scrollingContainer.scrollLeft >= maxScroll.x;\n  return {\n    isTop: isTop,\n    isLeft: isLeft,\n    isBottom: isBottom,\n    isRight: isRight,\n    maxScroll: maxScroll,\n    minScroll: minScroll\n  };\n}\nvar defaultThreshold = {\n  x: 0.2,\n  y: 0.2\n};\nfunction getScrollDirectionAndSpeed(scrollContainer, scrollContainerRect, _ref, acceleration, thresholdPercentage) {\n  var top = _ref.top,\n    left = _ref.left,\n    right = _ref.right,\n    bottom = _ref.bottom;\n  if (acceleration === void 0) {\n    acceleration = 10;\n  }\n  if (thresholdPercentage === void 0) {\n    thresholdPercentage = defaultThreshold;\n  }\n  var _getScrollPosition = getScrollPosition(scrollContainer),\n    isTop = _getScrollPosition.isTop,\n    isBottom = _getScrollPosition.isBottom,\n    isLeft = _getScrollPosition.isLeft,\n    isRight = _getScrollPosition.isRight;\n  var direction = {\n    x: 0,\n    y: 0\n  };\n  var speed = {\n    x: 0,\n    y: 0\n  };\n  var threshold = {\n    height: scrollContainerRect.height * thresholdPercentage.y,\n    width: scrollContainerRect.width * thresholdPercentage.x\n  };\n  if (!isTop && top <= scrollContainerRect.top + threshold.height) {\n    // Scroll Up\n    direction.y = Direction.Backward;\n    speed.y = acceleration * Math.abs((scrollContainerRect.top + threshold.height - top) / threshold.height);\n  } else if (!isBottom && bottom >= scrollContainerRect.bottom - threshold.height) {\n    // Scroll Down\n    direction.y = Direction.Forward;\n    speed.y = acceleration * Math.abs((scrollContainerRect.bottom - threshold.height - bottom) / threshold.height);\n  }\n  if (!isRight && right >= scrollContainerRect.right - threshold.width) {\n    // Scroll Right\n    direction.x = Direction.Forward;\n    speed.x = acceleration * Math.abs((scrollContainerRect.right - threshold.width - right) / threshold.width);\n  } else if (!isLeft && left <= scrollContainerRect.left + threshold.width) {\n    // Scroll Left\n    direction.x = Direction.Backward;\n    speed.x = acceleration * Math.abs((scrollContainerRect.left + threshold.width - left) / threshold.width);\n  }\n  return {\n    direction: direction,\n    speed: speed\n  };\n}\nfunction getScrollElementRect(element) {\n  if (element === document.scrollingElement) {\n    var _window = window,\n      innerWidth = _window.innerWidth,\n      innerHeight = _window.innerHeight;\n    return {\n      top: 0,\n      left: 0,\n      right: innerWidth,\n      bottom: innerHeight,\n      width: innerWidth,\n      height: innerHeight\n    };\n  }\n  var _element$getBoundingC = element.getBoundingClientRect(),\n    top = _element$getBoundingC.top,\n    left = _element$getBoundingC.left,\n    right = _element$getBoundingC.right,\n    bottom = _element$getBoundingC.bottom;\n  return {\n    top: top,\n    left: left,\n    right: right,\n    bottom: bottom,\n    width: element.clientWidth,\n    height: element.clientHeight\n  };\n}\nfunction getScrollOffsets(scrollableAncestors) {\n  return scrollableAncestors.reduce(function (acc, node) {\n    return add(acc, getScrollCoordinates(node));\n  }, defaultCoordinates);\n}\nfunction getScrollXOffset(scrollableAncestors) {\n  return scrollableAncestors.reduce(function (acc, node) {\n    return acc + getScrollXCoordinate(node);\n  }, 0);\n}\nfunction getScrollYOffset(scrollableAncestors) {\n  return scrollableAncestors.reduce(function (acc, node) {\n    return acc + getScrollYCoordinate(node);\n  }, 0);\n}\nfunction scrollIntoViewIfNeeded(element, measure) {\n  if (measure === void 0) {\n    measure = getClientRect;\n  }\n  if (!element) {\n    return;\n  }\n  var _measure = measure(element),\n    top = _measure.top,\n    left = _measure.left,\n    bottom = _measure.bottom,\n    right = _measure.right;\n  var firstScrollableAncestor = getFirstScrollableAncestor(element);\n  if (!firstScrollableAncestor) {\n    return;\n  }\n  if (bottom <= 0 || right <= 0 || top >= window.innerHeight || left >= window.innerWidth) {\n    element.scrollIntoView({\n      block: 'center',\n      inline: 'center'\n    });\n  }\n}\nvar properties = [['x', ['left', 'right'], getScrollXOffset], ['y', ['top', 'bottom'], getScrollYOffset]];\nvar Rect = function Rect(rect, element) {\n  var _this = this;\n  _classCallCheck(this, Rect);\n  this.rect = void 0;\n  this.width = void 0;\n  this.height = void 0;\n  this.top = void 0;\n  this.bottom = void 0;\n  this.right = void 0;\n  this.left = void 0;\n  var scrollableAncestors = getScrollableAncestors(element);\n  var scrollOffsets = getScrollOffsets(scrollableAncestors);\n  this.rect = _objectSpread({}, rect);\n  this.width = rect.width;\n  this.height = rect.height;\n  var _loop2 = function _loop2() {\n    var _properties$_i = _slicedToArray(_properties[_i], 3),\n      axis = _properties$_i[0],\n      keys = _properties$_i[1],\n      getScrollOffset = _properties$_i[2];\n    var _iterator5 = _createForOfIteratorHelper(keys),\n      _step5;\n    try {\n      var _loop3 = function _loop3() {\n        var key = _step5.value;\n        Object.defineProperty(_this, key, {\n          get: function get() {\n            var currentOffsets = getScrollOffset(scrollableAncestors);\n            var scrollOffsetsDeltla = scrollOffsets[axis] - currentOffsets;\n            return _this.rect[key] + scrollOffsetsDeltla;\n          },\n          enumerable: true\n        });\n      };\n      for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n        _loop3();\n      }\n    } catch (err) {\n      _iterator5.e(err);\n    } finally {\n      _iterator5.f();\n    }\n  };\n  for (var _i = 0, _properties = properties; _i < _properties.length; _i++) {\n    _loop2();\n  }\n  Object.defineProperty(this, 'rect', {\n    enumerable: false\n  });\n};\nvar Listeners = /*#__PURE__*/function () {\n  function Listeners(target) {\n    var _this2 = this;\n    _classCallCheck(this, Listeners);\n    this.target = void 0;\n    this.listeners = [];\n    this.removeAll = function () {\n      _this2.listeners.forEach(function (listener) {\n        var _this$target3;\n        var _this$target;\n        return (_this$target = _this2.target) == null ? void 0 : (_this$target3 = _this$target).removeEventListener.apply(_this$target3, _toConsumableArray(listener));\n      });\n    };\n    this.target = target;\n  }\n  _createClass(Listeners, [{\n    key: \"add\",\n    value: function add(eventName, handler, options) {\n      var _this$target2;\n      (_this$target2 = this.target) == null ? void 0 : _this$target2.addEventListener(eventName, handler, options);\n      this.listeners.push([eventName, handler, options]);\n    }\n  }]);\n  return Listeners;\n}();\nfunction getEventListenerTarget(target) {\n  // If the `event.target` element is removed from the document events will still be targeted\n  // at it, and hence won't always bubble up to the window or document anymore.\n  // If there is any risk of an element being removed while it is being dragged,\n  // the best practice is to attach the event listeners directly to the target.\n  // https://developer.mozilla.org/en-US/docs/Web/API/EventTarget\n  var _getWindow = getWindow(target),\n    EventTarget = _getWindow.EventTarget;\n  return target instanceof EventTarget ? target : getOwnerDocument(target);\n}\nfunction hasExceededDistance(delta, measurement) {\n  var dx = Math.abs(delta.x);\n  var dy = Math.abs(delta.y);\n  if (typeof measurement === 'number') {\n    return Math.sqrt(Math.pow(dx, 2) + Math.pow(dy, 2)) > measurement;\n  }\n  if ('x' in measurement && 'y' in measurement) {\n    return dx > measurement.x && dy > measurement.y;\n  }\n  if ('x' in measurement) {\n    return dx > measurement.x;\n  }\n  if ('y' in measurement) {\n    return dy > measurement.y;\n  }\n  return false;\n}\nvar EventName;\n(function (EventName) {\n  EventName[\"Click\"] = \"click\";\n  EventName[\"DragStart\"] = \"dragstart\";\n  EventName[\"Keydown\"] = \"keydown\";\n  EventName[\"ContextMenu\"] = \"contextmenu\";\n  EventName[\"Resize\"] = \"resize\";\n  EventName[\"SelectionChange\"] = \"selectionchange\";\n  EventName[\"VisibilityChange\"] = \"visibilitychange\";\n})(EventName || (EventName = {}));\nfunction preventDefault(event) {\n  event.preventDefault();\n}\nfunction stopPropagation(event) {\n  event.stopPropagation();\n}\nvar KeyboardCode;\n(function (KeyboardCode) {\n  KeyboardCode[\"Space\"] = \"Space\";\n  KeyboardCode[\"Down\"] = \"ArrowDown\";\n  KeyboardCode[\"Right\"] = \"ArrowRight\";\n  KeyboardCode[\"Left\"] = \"ArrowLeft\";\n  KeyboardCode[\"Up\"] = \"ArrowUp\";\n  KeyboardCode[\"Esc\"] = \"Escape\";\n  KeyboardCode[\"Enter\"] = \"Enter\";\n})(KeyboardCode || (KeyboardCode = {}));\nvar defaultKeyboardCodes = {\n  start: [KeyboardCode.Space, KeyboardCode.Enter],\n  cancel: [KeyboardCode.Esc],\n  end: [KeyboardCode.Space, KeyboardCode.Enter]\n};\nvar defaultKeyboardCoordinateGetter = function defaultKeyboardCoordinateGetter(event, _ref) {\n  var currentCoordinates = _ref.currentCoordinates;\n  switch (event.code) {\n    case KeyboardCode.Right:\n      return _objectSpread({}, currentCoordinates, {\n        x: currentCoordinates.x + 25\n      });\n    case KeyboardCode.Left:\n      return _objectSpread({}, currentCoordinates, {\n        x: currentCoordinates.x - 25\n      });\n    case KeyboardCode.Down:\n      return _objectSpread({}, currentCoordinates, {\n        y: currentCoordinates.y + 25\n      });\n    case KeyboardCode.Up:\n      return _objectSpread({}, currentCoordinates, {\n        y: currentCoordinates.y - 25\n      });\n  }\n  return undefined;\n};\nvar KeyboardSensor = /*#__PURE__*/function () {\n  function KeyboardSensor(props) {\n    _classCallCheck(this, KeyboardSensor);\n    this.props = void 0;\n    this.autoScrollEnabled = false;\n    this.referenceCoordinates = void 0;\n    this.listeners = void 0;\n    this.windowListeners = void 0;\n    this.props = props;\n    var target = props.event.target;\n    this.props = props;\n    this.listeners = new Listeners(getOwnerDocument(target));\n    this.windowListeners = new Listeners(getWindow(target));\n    this.handleKeyDown = this.handleKeyDown.bind(this);\n    this.handleCancel = this.handleCancel.bind(this);\n    this.attach();\n  }\n  _createClass(KeyboardSensor, [{\n    key: \"attach\",\n    value: function attach() {\n      var _this3 = this;\n      this.handleStart();\n      this.windowListeners.add(EventName.Resize, this.handleCancel);\n      this.windowListeners.add(EventName.VisibilityChange, this.handleCancel);\n      setTimeout(function () {\n        return _this3.listeners.add(EventName.Keydown, _this3.handleKeyDown);\n      });\n    }\n  }, {\n    key: \"handleStart\",\n    value: function handleStart() {\n      var _this$props = this.props,\n        activeNode = _this$props.activeNode,\n        onStart = _this$props.onStart;\n      var node = activeNode.node.current;\n      if (node) {\n        scrollIntoViewIfNeeded(node);\n      }\n      onStart(defaultCoordinates);\n    }\n  }, {\n    key: \"handleKeyDown\",\n    value: function handleKeyDown(event) {\n      if (isKeyboardEvent(event)) {\n        var _this$props2 = this.props,\n          active = _this$props2.active,\n          context = _this$props2.context,\n          options = _this$props2.options;\n        var _options$keyboardCode = options.keyboardCodes,\n          keyboardCodes = _options$keyboardCode === void 0 ? defaultKeyboardCodes : _options$keyboardCode,\n          _options$coordinateGe = options.coordinateGetter,\n          coordinateGetter = _options$coordinateGe === void 0 ? defaultKeyboardCoordinateGetter : _options$coordinateGe,\n          _options$scrollBehavi = options.scrollBehavior,\n          scrollBehavior = _options$scrollBehavi === void 0 ? 'smooth' : _options$scrollBehavi;\n        var code = event.code;\n        if (keyboardCodes.end.includes(code)) {\n          this.handleEnd(event);\n          return;\n        }\n        if (keyboardCodes.cancel.includes(code)) {\n          this.handleCancel(event);\n          return;\n        }\n        var collisionRect = context.current.collisionRect;\n        var currentCoordinates = collisionRect ? {\n          x: collisionRect.left,\n          y: collisionRect.top\n        } : defaultCoordinates;\n        if (!this.referenceCoordinates) {\n          this.referenceCoordinates = currentCoordinates;\n        }\n        var newCoordinates = coordinateGetter(event, {\n          active: active,\n          context: context.current,\n          currentCoordinates: currentCoordinates\n        });\n        if (newCoordinates) {\n          var coordinatesDelta = subtract(newCoordinates, currentCoordinates);\n          var scrollDelta = {\n            x: 0,\n            y: 0\n          };\n          var scrollableAncestors = context.current.scrollableAncestors;\n          var _iterator6 = _createForOfIteratorHelper(scrollableAncestors),\n            _step6;\n          try {\n            for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n              var scrollContainer = _step6.value;\n              var direction = event.code;\n              var _getScrollPosition2 = getScrollPosition(scrollContainer),\n                isTop = _getScrollPosition2.isTop,\n                isRight = _getScrollPosition2.isRight,\n                isLeft = _getScrollPosition2.isLeft,\n                isBottom = _getScrollPosition2.isBottom,\n                maxScroll = _getScrollPosition2.maxScroll,\n                minScroll = _getScrollPosition2.minScroll;\n              var scrollElementRect = getScrollElementRect(scrollContainer);\n              var clampedCoordinates = {\n                x: Math.min(direction === KeyboardCode.Right ? scrollElementRect.right - scrollElementRect.width / 2 : scrollElementRect.right, Math.max(direction === KeyboardCode.Right ? scrollElementRect.left : scrollElementRect.left + scrollElementRect.width / 2, newCoordinates.x)),\n                y: Math.min(direction === KeyboardCode.Down ? scrollElementRect.bottom - scrollElementRect.height / 2 : scrollElementRect.bottom, Math.max(direction === KeyboardCode.Down ? scrollElementRect.top : scrollElementRect.top + scrollElementRect.height / 2, newCoordinates.y))\n              };\n              var canScrollX = direction === KeyboardCode.Right && !isRight || direction === KeyboardCode.Left && !isLeft;\n              var canScrollY = direction === KeyboardCode.Down && !isBottom || direction === KeyboardCode.Up && !isTop;\n              if (canScrollX && clampedCoordinates.x !== newCoordinates.x) {\n                var newScrollCoordinates = scrollContainer.scrollLeft + coordinatesDelta.x;\n                var canScrollToNewCoordinates = direction === KeyboardCode.Right && newScrollCoordinates <= maxScroll.x || direction === KeyboardCode.Left && newScrollCoordinates >= minScroll.x;\n                if (canScrollToNewCoordinates && !coordinatesDelta.y) {\n                  // We don't need to update coordinates, the scroll adjustment alone will trigger\n                  // logic to auto-detect the new container we are over\n                  scrollContainer.scrollTo({\n                    left: newScrollCoordinates,\n                    behavior: scrollBehavior\n                  });\n                  return;\n                }\n                if (canScrollToNewCoordinates) {\n                  scrollDelta.x = scrollContainer.scrollLeft - newScrollCoordinates;\n                } else {\n                  scrollDelta.x = direction === KeyboardCode.Right ? scrollContainer.scrollLeft - maxScroll.x : scrollContainer.scrollLeft - minScroll.x;\n                }\n                if (scrollDelta.x) {\n                  scrollContainer.scrollBy({\n                    left: -scrollDelta.x,\n                    behavior: scrollBehavior\n                  });\n                }\n                break;\n              } else if (canScrollY && clampedCoordinates.y !== newCoordinates.y) {\n                var _newScrollCoordinates = scrollContainer.scrollTop + coordinatesDelta.y;\n                var _canScrollToNewCoordinates = direction === KeyboardCode.Down && _newScrollCoordinates <= maxScroll.y || direction === KeyboardCode.Up && _newScrollCoordinates >= minScroll.y;\n                if (_canScrollToNewCoordinates && !coordinatesDelta.x) {\n                  // We don't need to update coordinates, the scroll adjustment alone will trigger\n                  // logic to auto-detect the new container we are over\n                  scrollContainer.scrollTo({\n                    top: _newScrollCoordinates,\n                    behavior: scrollBehavior\n                  });\n                  return;\n                }\n                if (_canScrollToNewCoordinates) {\n                  scrollDelta.y = scrollContainer.scrollTop - _newScrollCoordinates;\n                } else {\n                  scrollDelta.y = direction === KeyboardCode.Down ? scrollContainer.scrollTop - maxScroll.y : scrollContainer.scrollTop - minScroll.y;\n                }\n                if (scrollDelta.y) {\n                  scrollContainer.scrollBy({\n                    top: -scrollDelta.y,\n                    behavior: scrollBehavior\n                  });\n                }\n                break;\n              }\n            }\n          } catch (err) {\n            _iterator6.e(err);\n          } finally {\n            _iterator6.f();\n          }\n          this.handleMove(event, add(subtract(newCoordinates, this.referenceCoordinates), scrollDelta));\n        }\n      }\n    }\n  }, {\n    key: \"handleMove\",\n    value: function handleMove(event, coordinates) {\n      var onMove = this.props.onMove;\n      event.preventDefault();\n      onMove(coordinates);\n    }\n  }, {\n    key: \"handleEnd\",\n    value: function handleEnd(event) {\n      var onEnd = this.props.onEnd;\n      event.preventDefault();\n      this.detach();\n      onEnd();\n    }\n  }, {\n    key: \"handleCancel\",\n    value: function handleCancel(event) {\n      var onCancel = this.props.onCancel;\n      event.preventDefault();\n      this.detach();\n      onCancel();\n    }\n  }, {\n    key: \"detach\",\n    value: function detach() {\n      this.listeners.removeAll();\n      this.windowListeners.removeAll();\n    }\n  }]);\n  return KeyboardSensor;\n}();\nKeyboardSensor.activators = [{\n  eventName: 'onKeyDown',\n  handler: function handler(event, _ref, _ref2) {\n    var _ref$keyboardCodes = _ref.keyboardCodes,\n      keyboardCodes = _ref$keyboardCodes === void 0 ? defaultKeyboardCodes : _ref$keyboardCodes,\n      onActivation = _ref.onActivation;\n    var active = _ref2.active;\n    var code = event.nativeEvent.code;\n    if (keyboardCodes.start.includes(code)) {\n      var activator = active.activatorNode.current;\n      if (activator && event.target !== activator) {\n        return false;\n      }\n      event.preventDefault();\n      onActivation == null ? void 0 : onActivation({\n        event: event.nativeEvent\n      });\n      return true;\n    }\n    return false;\n  }\n}];\nfunction isDistanceConstraint(constraint) {\n  return Boolean(constraint && 'distance' in constraint);\n}\nfunction isDelayConstraint(constraint) {\n  return Boolean(constraint && 'delay' in constraint);\n}\nvar AbstractPointerSensor = /*#__PURE__*/function () {\n  function AbstractPointerSensor(props, events, listenerTarget) {\n    _classCallCheck(this, AbstractPointerSensor);\n    var _getEventCoordinates;\n    if (listenerTarget === void 0) {\n      listenerTarget = getEventListenerTarget(props.event.target);\n    }\n    this.props = void 0;\n    this.events = void 0;\n    this.autoScrollEnabled = true;\n    this.document = void 0;\n    this.activated = false;\n    this.initialCoordinates = void 0;\n    this.timeoutId = null;\n    this.listeners = void 0;\n    this.documentListeners = void 0;\n    this.windowListeners = void 0;\n    this.props = props;\n    this.events = events;\n    var event = props.event;\n    var target = event.target;\n    this.props = props;\n    this.events = events;\n    this.document = getOwnerDocument(target);\n    this.documentListeners = new Listeners(this.document);\n    this.listeners = new Listeners(listenerTarget);\n    this.windowListeners = new Listeners(getWindow(target));\n    this.initialCoordinates = (_getEventCoordinates = getEventCoordinates(event)) != null ? _getEventCoordinates : defaultCoordinates;\n    this.handleStart = this.handleStart.bind(this);\n    this.handleMove = this.handleMove.bind(this);\n    this.handleEnd = this.handleEnd.bind(this);\n    this.handleCancel = this.handleCancel.bind(this);\n    this.handleKeydown = this.handleKeydown.bind(this);\n    this.removeTextSelection = this.removeTextSelection.bind(this);\n    this.attach();\n  }\n  _createClass(AbstractPointerSensor, [{\n    key: \"attach\",\n    value: function attach() {\n      var events = this.events,\n        _this$props$options = this.props.options,\n        activationConstraint = _this$props$options.activationConstraint,\n        bypassActivationConstraint = _this$props$options.bypassActivationConstraint;\n      this.listeners.add(events.move.name, this.handleMove, {\n        passive: false\n      });\n      this.listeners.add(events.end.name, this.handleEnd);\n      this.windowListeners.add(EventName.Resize, this.handleCancel);\n      this.windowListeners.add(EventName.DragStart, preventDefault);\n      this.windowListeners.add(EventName.VisibilityChange, this.handleCancel);\n      this.windowListeners.add(EventName.ContextMenu, preventDefault);\n      this.documentListeners.add(EventName.Keydown, this.handleKeydown);\n      if (activationConstraint) {\n        if (bypassActivationConstraint != null && bypassActivationConstraint({\n          event: this.props.event,\n          activeNode: this.props.activeNode,\n          options: this.props.options\n        })) {\n          return this.handleStart();\n        }\n        if (isDelayConstraint(activationConstraint)) {\n          this.timeoutId = setTimeout(this.handleStart, activationConstraint.delay);\n          return;\n        }\n        if (isDistanceConstraint(activationConstraint)) {\n          return;\n        }\n      }\n      this.handleStart();\n    }\n  }, {\n    key: \"detach\",\n    value: function detach() {\n      this.listeners.removeAll();\n      this.windowListeners.removeAll(); // Wait until the next event loop before removing document listeners\n      // This is necessary because we listen for `click` and `selection` events on the document\n\n      setTimeout(this.documentListeners.removeAll, 50);\n      if (this.timeoutId !== null) {\n        clearTimeout(this.timeoutId);\n        this.timeoutId = null;\n      }\n    }\n  }, {\n    key: \"handleStart\",\n    value: function handleStart() {\n      var initialCoordinates = this.initialCoordinates;\n      var onStart = this.props.onStart;\n      if (initialCoordinates) {\n        this.activated = true; // Stop propagation of click events once activation constraints are met\n\n        this.documentListeners.add(EventName.Click, stopPropagation, {\n          capture: true\n        }); // Remove any text selection from the document\n\n        this.removeTextSelection(); // Prevent further text selection while dragging\n\n        this.documentListeners.add(EventName.SelectionChange, this.removeTextSelection);\n        onStart(initialCoordinates);\n      }\n    }\n  }, {\n    key: \"handleMove\",\n    value: function handleMove(event) {\n      var _getEventCoordinates2;\n      var activated = this.activated,\n        initialCoordinates = this.initialCoordinates,\n        props = this.props;\n      var onMove = props.onMove,\n        activationConstraint = props.options.activationConstraint;\n      if (!initialCoordinates) {\n        return;\n      }\n      var coordinates = (_getEventCoordinates2 = getEventCoordinates(event)) != null ? _getEventCoordinates2 : defaultCoordinates;\n      var delta = subtract(initialCoordinates, coordinates); // Constraint validation\n\n      if (!activated && activationConstraint) {\n        if (isDistanceConstraint(activationConstraint)) {\n          if (activationConstraint.tolerance != null && hasExceededDistance(delta, activationConstraint.tolerance)) {\n            return this.handleCancel();\n          }\n          if (hasExceededDistance(delta, activationConstraint.distance)) {\n            return this.handleStart();\n          }\n        }\n        if (isDelayConstraint(activationConstraint)) {\n          if (hasExceededDistance(delta, activationConstraint.tolerance)) {\n            return this.handleCancel();\n          }\n        }\n        return;\n      }\n      if (event.cancelable) {\n        event.preventDefault();\n      }\n      onMove(coordinates);\n    }\n  }, {\n    key: \"handleEnd\",\n    value: function handleEnd() {\n      var onEnd = this.props.onEnd;\n      this.detach();\n      onEnd();\n    }\n  }, {\n    key: \"handleCancel\",\n    value: function handleCancel() {\n      var onCancel = this.props.onCancel;\n      this.detach();\n      onCancel();\n    }\n  }, {\n    key: \"handleKeydown\",\n    value: function handleKeydown(event) {\n      if (event.code === KeyboardCode.Esc) {\n        this.handleCancel();\n      }\n    }\n  }, {\n    key: \"removeTextSelection\",\n    value: function removeTextSelection() {\n      var _this$document$getSel;\n      (_this$document$getSel = this.document.getSelection()) == null ? void 0 : _this$document$getSel.removeAllRanges();\n    }\n  }]);\n  return AbstractPointerSensor;\n}();\nvar events = {\n  move: {\n    name: 'pointermove'\n  },\n  end: {\n    name: 'pointerup'\n  }\n};\nvar PointerSensor = /*#__PURE__*/function (_AbstractPointerSenso) {\n  _inherits(PointerSensor, _AbstractPointerSenso);\n  function PointerSensor(props) {\n    _classCallCheck(this, PointerSensor);\n    var event = props.event; // Pointer events stop firing if the target is unmounted while dragging\n    // Therefore we attach listeners to the owner document instead\n    var listenerTarget = getOwnerDocument(event.target);\n    return _possibleConstructorReturn(this, _getPrototypeOf(PointerSensor).call(this, props, events, listenerTarget));\n  }\n  return PointerSensor;\n}(AbstractPointerSensor);\nPointerSensor.activators = [{\n  eventName: 'onPointerDown',\n  handler: function handler(_ref, _ref2) {\n    var event = _ref.nativeEvent;\n    var onActivation = _ref2.onActivation;\n    if (!event.isPrimary || event.button !== 0) {\n      return false;\n    }\n    onActivation == null ? void 0 : onActivation({\n      event: event\n    });\n    return true;\n  }\n}];\nvar events$1 = {\n  move: {\n    name: 'mousemove'\n  },\n  end: {\n    name: 'mouseup'\n  }\n};\nvar MouseButton;\n(function (MouseButton) {\n  MouseButton[MouseButton[\"RightClick\"] = 2] = \"RightClick\";\n})(MouseButton || (MouseButton = {}));\nvar MouseSensor = /*#__PURE__*/function (_AbstractPointerSenso2) {\n  _inherits(MouseSensor, _AbstractPointerSenso2);\n  function MouseSensor(props) {\n    _classCallCheck(this, MouseSensor);\n    return _possibleConstructorReturn(this, _getPrototypeOf(MouseSensor).call(this, props, events$1, getOwnerDocument(props.event.target)));\n  }\n  return MouseSensor;\n}(AbstractPointerSensor);\nMouseSensor.activators = [{\n  eventName: 'onMouseDown',\n  handler: function handler(_ref, _ref2) {\n    var event = _ref.nativeEvent;\n    var onActivation = _ref2.onActivation;\n    if (event.button === MouseButton.RightClick) {\n      return false;\n    }\n    onActivation == null ? void 0 : onActivation({\n      event: event\n    });\n    return true;\n  }\n}];\nvar events$2 = {\n  move: {\n    name: 'touchmove'\n  },\n  end: {\n    name: 'touchend'\n  }\n};\nvar TouchSensor = /*#__PURE__*/function (_AbstractPointerSenso3) {\n  _inherits(TouchSensor, _AbstractPointerSenso3);\n  function TouchSensor(props) {\n    _classCallCheck(this, TouchSensor);\n    return _possibleConstructorReturn(this, _getPrototypeOf(TouchSensor).call(this, props, events$2));\n  }\n  _createClass(TouchSensor, null, [{\n    key: \"setup\",\n    value: function setup() {\n      // Adding a non-capture and non-passive `touchmove` listener in order\n      // to force `event.preventDefault()` calls to work in dynamically added\n      // touchmove event handlers. This is required for iOS Safari.\n      window.addEventListener(events$2.move.name, noop, {\n        capture: false,\n        passive: false\n      });\n      return function teardown() {\n        window.removeEventListener(events$2.move.name, noop);\n      }; // We create a new handler because the teardown function of another sensor\n      // could remove our event listener if we use a referentially equal listener.\n\n      function noop() {}\n    }\n  }]);\n  return TouchSensor;\n}(AbstractPointerSensor);\nTouchSensor.activators = [{\n  eventName: 'onTouchStart',\n  handler: function handler(_ref, _ref2) {\n    var event = _ref.nativeEvent;\n    var onActivation = _ref2.onActivation;\n    var touches = event.touches;\n    if (touches.length > 1) {\n      return false;\n    }\n    onActivation == null ? void 0 : onActivation({\n      event: event\n    });\n    return true;\n  }\n}];\nvar AutoScrollActivator;\n(function (AutoScrollActivator) {\n  AutoScrollActivator[AutoScrollActivator[\"Pointer\"] = 0] = \"Pointer\";\n  AutoScrollActivator[AutoScrollActivator[\"DraggableRect\"] = 1] = \"DraggableRect\";\n})(AutoScrollActivator || (AutoScrollActivator = {}));\nvar TraversalOrder;\n(function (TraversalOrder) {\n  TraversalOrder[TraversalOrder[\"TreeOrder\"] = 0] = \"TreeOrder\";\n  TraversalOrder[TraversalOrder[\"ReversedTreeOrder\"] = 1] = \"ReversedTreeOrder\";\n})(TraversalOrder || (TraversalOrder = {}));\nfunction useAutoScroller(_ref) {\n  var acceleration = _ref.acceleration,\n    _ref$activator = _ref.activator,\n    activator = _ref$activator === void 0 ? AutoScrollActivator.Pointer : _ref$activator,\n    canScroll = _ref.canScroll,\n    draggingRect = _ref.draggingRect,\n    enabled = _ref.enabled,\n    _ref$interval = _ref.interval,\n    interval = _ref$interval === void 0 ? 5 : _ref$interval,\n    _ref$order = _ref.order,\n    order = _ref$order === void 0 ? TraversalOrder.TreeOrder : _ref$order,\n    pointerCoordinates = _ref.pointerCoordinates,\n    scrollableAncestors = _ref.scrollableAncestors,\n    scrollableAncestorRects = _ref.scrollableAncestorRects,\n    delta = _ref.delta,\n    threshold = _ref.threshold;\n  var scrollIntent = useScrollIntent({\n    delta: delta,\n    disabled: !enabled\n  });\n  var _useInterval = useInterval(),\n    _useInterval2 = _slicedToArray(_useInterval, 2),\n    setAutoScrollInterval = _useInterval2[0],\n    clearAutoScrollInterval = _useInterval2[1];\n  var scrollSpeed = useRef({\n    x: 0,\n    y: 0\n  });\n  var scrollDirection = useRef({\n    x: 0,\n    y: 0\n  });\n  var rect = useMemo(function () {\n    switch (activator) {\n      case AutoScrollActivator.Pointer:\n        return pointerCoordinates ? {\n          top: pointerCoordinates.y,\n          bottom: pointerCoordinates.y,\n          left: pointerCoordinates.x,\n          right: pointerCoordinates.x\n        } : null;\n      case AutoScrollActivator.DraggableRect:\n        return draggingRect;\n    }\n  }, [activator, draggingRect, pointerCoordinates]);\n  var scrollContainerRef = useRef(null);\n  var autoScroll = useCallback(function () {\n    var scrollContainer = scrollContainerRef.current;\n    if (!scrollContainer) {\n      return;\n    }\n    var scrollLeft = scrollSpeed.current.x * scrollDirection.current.x;\n    var scrollTop = scrollSpeed.current.y * scrollDirection.current.y;\n    scrollContainer.scrollBy(scrollLeft, scrollTop);\n  }, []);\n  var sortedScrollableAncestors = useMemo(function () {\n    return order === TraversalOrder.TreeOrder ? _toConsumableArray(scrollableAncestors).reverse() : scrollableAncestors;\n  }, [order, scrollableAncestors]);\n  useEffect(function () {\n    if (!enabled || !scrollableAncestors.length || !rect) {\n      clearAutoScrollInterval();\n      return;\n    }\n    var _iterator7 = _createForOfIteratorHelper(sortedScrollableAncestors),\n      _step7;\n    try {\n      for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n        var scrollContainer = _step7.value;\n        if ((canScroll == null ? void 0 : canScroll(scrollContainer)) === false) {\n          continue;\n        }\n        var index = scrollableAncestors.indexOf(scrollContainer);\n        var scrollContainerRect = scrollableAncestorRects[index];\n        if (!scrollContainerRect) {\n          continue;\n        }\n        var _getScrollDirectionAn = getScrollDirectionAndSpeed(scrollContainer, scrollContainerRect, rect, acceleration, threshold),\n          direction = _getScrollDirectionAn.direction,\n          speed = _getScrollDirectionAn.speed;\n        for (var _i2 = 0, _arr = ['x', 'y']; _i2 < _arr.length; _i2++) {\n          var axis = _arr[_i2];\n          if (!scrollIntent[axis][direction[axis]]) {\n            speed[axis] = 0;\n            direction[axis] = 0;\n          }\n        }\n        if (speed.x > 0 || speed.y > 0) {\n          clearAutoScrollInterval();\n          scrollContainerRef.current = scrollContainer;\n          setAutoScrollInterval(autoScroll, interval);\n          scrollSpeed.current = speed;\n          scrollDirection.current = direction;\n          return;\n        }\n      }\n    } catch (err) {\n      _iterator7.e(err);\n    } finally {\n      _iterator7.f();\n    }\n    scrollSpeed.current = {\n      x: 0,\n      y: 0\n    };\n    scrollDirection.current = {\n      x: 0,\n      y: 0\n    };\n    clearAutoScrollInterval();\n  },\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  [acceleration, autoScroll, canScroll, clearAutoScrollInterval, enabled, interval,\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  JSON.stringify(rect),\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  JSON.stringify(scrollIntent), setAutoScrollInterval, scrollableAncestors, sortedScrollableAncestors, scrollableAncestorRects,\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  JSON.stringify(threshold)]);\n}\nvar defaultScrollIntent = {\n  x: _defineProperty(_defineProperty({}, Direction.Backward, false), Direction.Forward, false),\n  y: _defineProperty(_defineProperty({}, Direction.Backward, false), Direction.Forward, false)\n};\nfunction useScrollIntent(_ref2) {\n  var delta = _ref2.delta,\n    disabled = _ref2.disabled;\n  var previousDelta = usePrevious(delta);\n  return useLazyMemo(function (previousIntent) {\n    if (disabled || !previousDelta || !previousIntent) {\n      // Reset scroll intent tracking when auto-scrolling is disabled\n      return defaultScrollIntent;\n    }\n    var direction = {\n      x: Math.sign(delta.x - previousDelta.x),\n      y: Math.sign(delta.y - previousDelta.y)\n    }; // Keep track of the user intent to scroll in each direction for both axis\n\n    return {\n      x: _defineProperty(_defineProperty({}, Direction.Backward, previousIntent.x[Direction.Backward] || direction.x === -1), Direction.Forward, previousIntent.x[Direction.Forward] || direction.x === 1),\n      y: _defineProperty(_defineProperty({}, Direction.Backward, previousIntent.y[Direction.Backward] || direction.y === -1), Direction.Forward, previousIntent.y[Direction.Forward] || direction.y === 1)\n    };\n  }, [disabled, delta, previousDelta]);\n}\nfunction useCachedNode(draggableNodes, id) {\n  var draggableNode = id !== null ? draggableNodes.get(id) : undefined;\n  var node = draggableNode ? draggableNode.node.current : null;\n  return useLazyMemo(function (cachedNode) {\n    var _ref;\n    if (id === null) {\n      return null;\n    } // In some cases, the draggable node can unmount while dragging\n    // This is the case for virtualized lists. In those situations,\n    // we fall back to the last known value for that node.\n\n    return (_ref = node != null ? node : cachedNode) != null ? _ref : null;\n  }, [node, id]);\n}\nfunction useCombineActivators(sensors, getSyntheticHandler) {\n  return useMemo(function () {\n    return sensors.reduce(function (accumulator, sensor) {\n      var Sensor = sensor.sensor;\n      var sensorActivators = Sensor.activators.map(function (activator) {\n        return {\n          eventName: activator.eventName,\n          handler: getSyntheticHandler(activator.handler, sensor)\n        };\n      });\n      return [].concat(_toConsumableArray(accumulator), _toConsumableArray(sensorActivators));\n    }, []);\n  }, [sensors, getSyntheticHandler]);\n}\nvar MeasuringStrategy;\n(function (MeasuringStrategy) {\n  MeasuringStrategy[MeasuringStrategy[\"Always\"] = 0] = \"Always\";\n  MeasuringStrategy[MeasuringStrategy[\"BeforeDragging\"] = 1] = \"BeforeDragging\";\n  MeasuringStrategy[MeasuringStrategy[\"WhileDragging\"] = 2] = \"WhileDragging\";\n})(MeasuringStrategy || (MeasuringStrategy = {}));\nvar MeasuringFrequency;\n(function (MeasuringFrequency) {\n  MeasuringFrequency[\"Optimized\"] = \"optimized\";\n})(MeasuringFrequency || (MeasuringFrequency = {}));\nvar defaultValue = /*#__PURE__*/new Map();\nfunction useDroppableMeasuring(containers, _ref) {\n  var dragging = _ref.dragging,\n    dependencies = _ref.dependencies,\n    config = _ref.config;\n  var _useState5 = useState(null),\n    _useState6 = _slicedToArray(_useState5, 2),\n    queue = _useState6[0],\n    setQueue = _useState6[1];\n  var frequency = config.frequency,\n    measure = config.measure,\n    strategy = config.strategy;\n  var containersRef = useRef(containers);\n  var disabled = isDisabled();\n  var disabledRef = useLatestValue(disabled);\n  var measureDroppableContainers = useCallback(function (ids) {\n    if (ids === void 0) {\n      ids = [];\n    }\n    if (disabledRef.current) {\n      return;\n    }\n    setQueue(function (value) {\n      if (value === null) {\n        return ids;\n      }\n      return value.concat(ids.filter(function (id) {\n        return !value.includes(id);\n      }));\n    });\n  }, [disabledRef]);\n  var timeoutId = useRef(null);\n  var droppableRects = useLazyMemo(function (previousValue) {\n    if (disabled && !dragging) {\n      return defaultValue;\n    }\n    if (!previousValue || previousValue === defaultValue || containersRef.current !== containers || queue != null) {\n      var map = new Map();\n      var _iterator8 = _createForOfIteratorHelper(containers),\n        _step8;\n      try {\n        for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {\n          var container = _step8.value;\n          if (!container) {\n            continue;\n          }\n          if (queue && queue.length > 0 && !queue.includes(container.id) && container.rect.current) {\n            // This container does not need to be re-measured\n            map.set(container.id, container.rect.current);\n            continue;\n          }\n          var node = container.node.current;\n          var rect = node ? new Rect(measure(node), node) : null;\n          container.rect.current = rect;\n          if (rect) {\n            map.set(container.id, rect);\n          }\n        }\n      } catch (err) {\n        _iterator8.e(err);\n      } finally {\n        _iterator8.f();\n      }\n      return map;\n    }\n    return previousValue;\n  }, [containers, queue, dragging, disabled, measure]);\n  useEffect(function () {\n    containersRef.current = containers;\n  }, [containers]);\n  useEffect(function () {\n    if (disabled) {\n      return;\n    }\n    measureDroppableContainers();\n  },\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  [dragging, disabled]);\n  useEffect(function () {\n    if (queue && queue.length > 0) {\n      setQueue(null);\n    }\n  },\n  //eslint-disable-next-line react-hooks/exhaustive-deps\n  [JSON.stringify(queue)]);\n  useEffect(function () {\n    if (disabled || typeof frequency !== 'number' || timeoutId.current !== null) {\n      return;\n    }\n    timeoutId.current = setTimeout(function () {\n      measureDroppableContainers();\n      timeoutId.current = null;\n    }, frequency);\n  }, // eslint-disable-next-line react-hooks/exhaustive-deps\n  [frequency, disabled, measureDroppableContainers].concat(_toConsumableArray(dependencies)));\n  return {\n    droppableRects: droppableRects,\n    measureDroppableContainers: measureDroppableContainers,\n    measuringScheduled: queue != null\n  };\n  function isDisabled() {\n    switch (strategy) {\n      case MeasuringStrategy.Always:\n        return false;\n      case MeasuringStrategy.BeforeDragging:\n        return dragging;\n      default:\n        return !dragging;\n    }\n  }\n}\nfunction useInitialValue(value, computeFn) {\n  return useLazyMemo(function (previousValue) {\n    if (!value) {\n      return null;\n    }\n    if (previousValue) {\n      return previousValue;\n    }\n    return typeof computeFn === 'function' ? computeFn(value) : value;\n  }, [computeFn, value]);\n}\nfunction useInitialRect(node, measure) {\n  return useInitialValue(node, measure);\n}\n\n/**\r\n * Returns a new MutationObserver instance.\r\n * If `MutationObserver` is undefined in the execution environment, returns `undefined`.\r\n */\n\nfunction useMutationObserver(_ref) {\n  var callback = _ref.callback,\n    disabled = _ref.disabled;\n  var handleMutations = useEvent(callback);\n  var mutationObserver = useMemo(function () {\n    if (disabled || typeof window === 'undefined' || typeof window.MutationObserver === 'undefined') {\n      return undefined;\n    }\n    var _window2 = window,\n      MutationObserver = _window2.MutationObserver;\n    return new MutationObserver(handleMutations);\n  }, [handleMutations, disabled]);\n  useEffect(function () {\n    return function () {\n      return mutationObserver == null ? void 0 : mutationObserver.disconnect();\n    };\n  }, [mutationObserver]);\n  return mutationObserver;\n}\n\n/**\r\n * Returns a new ResizeObserver instance bound to the `onResize` callback.\r\n * If `ResizeObserver` is undefined in the execution environment, returns `undefined`.\r\n */\n\nfunction useResizeObserver(_ref) {\n  var callback = _ref.callback,\n    disabled = _ref.disabled;\n  var handleResize = useEvent(callback);\n  var resizeObserver = useMemo(function () {\n    if (disabled || typeof window === 'undefined' || typeof window.ResizeObserver === 'undefined') {\n      return undefined;\n    }\n    var _window3 = window,\n      ResizeObserver = _window3.ResizeObserver;\n    return new ResizeObserver(handleResize);\n  },\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  [disabled]);\n  useEffect(function () {\n    return function () {\n      return resizeObserver == null ? void 0 : resizeObserver.disconnect();\n    };\n  }, [resizeObserver]);\n  return resizeObserver;\n}\nfunction defaultMeasure(element) {\n  return new Rect(getClientRect(element), element);\n}\nfunction useRect(element, measure, fallbackRect) {\n  if (measure === void 0) {\n    measure = defaultMeasure;\n  }\n  var _useReducer = useReducer(reducer, null),\n    _useReducer2 = _slicedToArray(_useReducer, 2),\n    rect = _useReducer2[0],\n    measureRect = _useReducer2[1];\n  var mutationObserver = useMutationObserver({\n    callback: function callback(records) {\n      if (!element) {\n        return;\n      }\n      var _iterator9 = _createForOfIteratorHelper(records),\n        _step9;\n      try {\n        for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {\n          var record = _step9.value;\n          var type = record.type,\n            target = record.target;\n          if (type === 'childList' && target instanceof HTMLElement && target.contains(element)) {\n            measureRect();\n            break;\n          }\n        }\n      } catch (err) {\n        _iterator9.e(err);\n      } finally {\n        _iterator9.f();\n      }\n    }\n  });\n  var resizeObserver = useResizeObserver({\n    callback: measureRect\n  });\n  useIsomorphicLayoutEffect(function () {\n    measureRect();\n    if (element) {\n      resizeObserver == null ? void 0 : resizeObserver.observe(element);\n      mutationObserver == null ? void 0 : mutationObserver.observe(document.body, {\n        childList: true,\n        subtree: true\n      });\n    } else {\n      resizeObserver == null ? void 0 : resizeObserver.disconnect();\n      mutationObserver == null ? void 0 : mutationObserver.disconnect();\n    }\n  }, [element]);\n  return rect;\n  function reducer(currentRect) {\n    if (!element) {\n      return null;\n    }\n    if (element.isConnected === false) {\n      var _ref;\n\n      // Fall back to last rect we measured if the element is\n      // no longer connected to the DOM.\n      return (_ref = currentRect != null ? currentRect : fallbackRect) != null ? _ref : null;\n    }\n    var newRect = measure(element);\n    if (JSON.stringify(currentRect) === JSON.stringify(newRect)) {\n      return currentRect;\n    }\n    return newRect;\n  }\n}\nfunction useRectDelta(rect) {\n  var initialRect = useInitialValue(rect);\n  return getRectDelta(rect, initialRect);\n}\nvar defaultValue$1 = [];\nfunction useScrollableAncestors(node) {\n  var previousNode = useRef(node);\n  var ancestors = useLazyMemo(function (previousValue) {\n    if (!node) {\n      return defaultValue$1;\n    }\n    if (previousValue && previousValue !== defaultValue$1 && node && previousNode.current && node.parentNode === previousNode.current.parentNode) {\n      return previousValue;\n    }\n    return getScrollableAncestors(node);\n  }, [node]);\n  useEffect(function () {\n    previousNode.current = node;\n  }, [node]);\n  return ancestors;\n}\nfunction useScrollOffsets(elements) {\n  var _useState7 = useState(null),\n    _useState8 = _slicedToArray(_useState7, 2),\n    scrollCoordinates = _useState8[0],\n    setScrollCoordinates = _useState8[1];\n  var prevElements = useRef(elements); // To-do: Throttle the handleScroll callback\n\n  var handleScroll = useCallback(function (event) {\n    var scrollingElement = getScrollableElement(event.target);\n    if (!scrollingElement) {\n      return;\n    }\n    setScrollCoordinates(function (scrollCoordinates) {\n      if (!scrollCoordinates) {\n        return null;\n      }\n      scrollCoordinates.set(scrollingElement, getScrollCoordinates(scrollingElement));\n      return new Map(scrollCoordinates);\n    });\n  }, []);\n  useEffect(function () {\n    var previousElements = prevElements.current;\n    if (elements !== previousElements) {\n      cleanup(previousElements);\n      var entries = elements.map(function (element) {\n        var scrollableElement = getScrollableElement(element);\n        if (scrollableElement) {\n          scrollableElement.addEventListener('scroll', handleScroll, {\n            passive: true\n          });\n          return [scrollableElement, getScrollCoordinates(scrollableElement)];\n        }\n        return null;\n      }).filter(function (entry) {\n        return entry != null;\n      });\n      setScrollCoordinates(entries.length ? new Map(entries) : null);\n      prevElements.current = elements;\n    }\n    return function () {\n      cleanup(elements);\n      cleanup(previousElements);\n    };\n    function cleanup(elements) {\n      elements.forEach(function (element) {\n        var scrollableElement = getScrollableElement(element);\n        scrollableElement == null ? void 0 : scrollableElement.removeEventListener('scroll', handleScroll);\n      });\n    }\n  }, [handleScroll, elements]);\n  return useMemo(function () {\n    if (elements.length) {\n      return scrollCoordinates ? Array.from(scrollCoordinates.values()).reduce(function (acc, coordinates) {\n        return add(acc, coordinates);\n      }, defaultCoordinates) : getScrollOffsets(elements);\n    }\n    return defaultCoordinates;\n  }, [elements, scrollCoordinates]);\n}\nfunction useScrollOffsetsDelta(scrollOffsets, dependencies) {\n  if (dependencies === void 0) {\n    dependencies = [];\n  }\n  var initialScrollOffsets = useRef(null);\n  useEffect(function () {\n    initialScrollOffsets.current = null;\n  },\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  dependencies);\n  useEffect(function () {\n    var hasScrollOffsets = scrollOffsets !== defaultCoordinates;\n    if (hasScrollOffsets && !initialScrollOffsets.current) {\n      initialScrollOffsets.current = scrollOffsets;\n    }\n    if (!hasScrollOffsets && initialScrollOffsets.current) {\n      initialScrollOffsets.current = null;\n    }\n  }, [scrollOffsets]);\n  return initialScrollOffsets.current ? subtract(scrollOffsets, initialScrollOffsets.current) : defaultCoordinates;\n}\nfunction useSensorSetup(sensors) {\n  useEffect(function () {\n    if (!canUseDOM) {\n      return;\n    }\n    var teardownFns = sensors.map(function (_ref) {\n      var sensor = _ref.sensor;\n      return sensor.setup == null ? void 0 : sensor.setup();\n    });\n    return function () {\n      var _iterator10 = _createForOfIteratorHelper(teardownFns),\n        _step10;\n      try {\n        for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {\n          var teardown = _step10.value;\n          teardown == null ? void 0 : teardown();\n        }\n      } catch (err) {\n        _iterator10.e(err);\n      } finally {\n        _iterator10.f();\n      }\n    };\n  },\n  // TO-DO: Sensors length could theoretically change which would not be a valid dependency\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  sensors.map(function (_ref2) {\n    var sensor = _ref2.sensor;\n    return sensor;\n  }));\n}\nfunction useSyntheticListeners(listeners, id) {\n  return useMemo(function () {\n    return listeners.reduce(function (acc, _ref) {\n      var eventName = _ref.eventName,\n        handler = _ref.handler;\n      acc[eventName] = function (event) {\n        handler(event, id);\n      };\n      return acc;\n    }, {});\n  }, [listeners, id]);\n}\nfunction useWindowRect(element) {\n  return useMemo(function () {\n    return element ? getWindowClientRect(element) : null;\n  }, [element]);\n}\nvar defaultValue$2 = [];\nfunction useRects(elements, measure) {\n  if (measure === void 0) {\n    measure = getClientRect;\n  }\n  var _elements = _slicedToArray(elements, 1),\n    firstElement = _elements[0];\n  var windowRect = useWindowRect(firstElement ? getWindow(firstElement) : null);\n  var _useReducer3 = useReducer(reducer, defaultValue$2),\n    _useReducer4 = _slicedToArray(_useReducer3, 2),\n    rects = _useReducer4[0],\n    measureRects = _useReducer4[1];\n  var resizeObserver = useResizeObserver({\n    callback: measureRects\n  });\n  if (elements.length > 0 && rects === defaultValue$2) {\n    measureRects();\n  }\n  useIsomorphicLayoutEffect(function () {\n    if (elements.length) {\n      elements.forEach(function (element) {\n        return resizeObserver == null ? void 0 : resizeObserver.observe(element);\n      });\n    } else {\n      resizeObserver == null ? void 0 : resizeObserver.disconnect();\n      measureRects();\n    }\n  }, [elements]);\n  return rects;\n  function reducer() {\n    if (!elements.length) {\n      return defaultValue$2;\n    }\n    return elements.map(function (element) {\n      return isDocumentScrollingElement(element) ? windowRect : new Rect(measure(element), element);\n    });\n  }\n}\nfunction getMeasurableNode(node) {\n  if (!node) {\n    return null;\n  }\n  if (node.children.length > 1) {\n    return node;\n  }\n  var firstChild = node.children[0];\n  return isHTMLElement(firstChild) ? firstChild : node;\n}\nfunction useDragOverlayMeasuring(_ref) {\n  var measure = _ref.measure;\n  var _useState9 = useState(null),\n    _useState10 = _slicedToArray(_useState9, 2),\n    rect = _useState10[0],\n    setRect = _useState10[1];\n  var handleResize = useCallback(function (entries) {\n    var _iterator11 = _createForOfIteratorHelper(entries),\n      _step11;\n    try {\n      var _loop4 = function _loop4() {\n        var target = _step11.value.target;\n        if (isHTMLElement(target)) {\n          setRect(function (rect) {\n            var newRect = measure(target);\n            return rect ? _objectSpread({}, rect, {\n              width: newRect.width,\n              height: newRect.height\n            }) : newRect;\n          });\n          return 1; // break\n        }\n      };\n      for (_iterator11.s(); !(_step11 = _iterator11.n()).done;) {\n        if (_loop4()) break;\n      }\n    } catch (err) {\n      _iterator11.e(err);\n    } finally {\n      _iterator11.f();\n    }\n  }, [measure]);\n  var resizeObserver = useResizeObserver({\n    callback: handleResize\n  });\n  var handleNodeChange = useCallback(function (element) {\n    var node = getMeasurableNode(element);\n    resizeObserver == null ? void 0 : resizeObserver.disconnect();\n    if (node) {\n      resizeObserver == null ? void 0 : resizeObserver.observe(node);\n    }\n    setRect(node ? measure(node) : null);\n  }, [measure, resizeObserver]);\n  var _useNodeRef = useNodeRef(handleNodeChange),\n    _useNodeRef2 = _slicedToArray(_useNodeRef, 2),\n    nodeRef = _useNodeRef2[0],\n    setRef = _useNodeRef2[1];\n  return useMemo(function () {\n    return {\n      nodeRef: nodeRef,\n      rect: rect,\n      setRef: setRef\n    };\n  }, [rect, nodeRef, setRef]);\n}\nvar defaultSensors = [{\n  sensor: PointerSensor,\n  options: {}\n}, {\n  sensor: KeyboardSensor,\n  options: {}\n}];\nvar defaultData = {\n  current: {}\n};\nvar defaultMeasuringConfiguration = {\n  draggable: {\n    measure: getTransformAgnosticClientRect\n  },\n  droppable: {\n    measure: getTransformAgnosticClientRect,\n    strategy: MeasuringStrategy.WhileDragging,\n    frequency: MeasuringFrequency.Optimized\n  },\n  dragOverlay: {\n    measure: getClientRect\n  }\n};\nvar DroppableContainersMap = /*#__PURE__*/function (_Map) {\n  _inherits(DroppableContainersMap, _Map);\n  function DroppableContainersMap() {\n    _classCallCheck(this, DroppableContainersMap);\n    return _possibleConstructorReturn(this, _getPrototypeOf(DroppableContainersMap).apply(this, arguments));\n  }\n  _createClass(DroppableContainersMap, [{\n    key: \"get\",\n    value: function get(id) {\n      var _super$get;\n      return id != null ? (_super$get = _superPropGet(DroppableContainersMap, \"get\", this, 3)([id])) != null ? _super$get : undefined : undefined;\n    }\n  }, {\n    key: \"toArray\",\n    value: function toArray() {\n      return Array.from(this.values());\n    }\n  }, {\n    key: \"getEnabled\",\n    value: function getEnabled() {\n      return this.toArray().filter(function (_ref) {\n        var disabled = _ref.disabled;\n        return !disabled;\n      });\n    }\n  }, {\n    key: \"getNodeFor\",\n    value: function getNodeFor(id) {\n      var _this$get$node$curren, _this$get;\n      return (_this$get$node$curren = (_this$get = this.get(id)) == null ? void 0 : _this$get.node.current) != null ? _this$get$node$curren : undefined;\n    }\n  }]);\n  return DroppableContainersMap;\n}(_wrapNativeSuper(Map));\nvar defaultPublicContext = {\n  activatorEvent: null,\n  active: null,\n  activeNode: null,\n  activeNodeRect: null,\n  collisions: null,\n  containerNodeRect: null,\n  draggableNodes: /*#__PURE__*/new Map(),\n  droppableRects: /*#__PURE__*/new Map(),\n  droppableContainers: /*#__PURE__*/new DroppableContainersMap(),\n  over: null,\n  dragOverlay: {\n    nodeRef: {\n      current: null\n    },\n    rect: null,\n    setRef: noop\n  },\n  scrollableAncestors: [],\n  scrollableAncestorRects: [],\n  measuringConfiguration: defaultMeasuringConfiguration,\n  measureDroppableContainers: noop,\n  windowRect: null,\n  measuringScheduled: false\n};\nvar defaultInternalContext = {\n  activatorEvent: null,\n  activators: [],\n  active: null,\n  activeNodeRect: null,\n  ariaDescribedById: {\n    draggable: ''\n  },\n  dispatch: noop,\n  draggableNodes: /*#__PURE__*/new Map(),\n  over: null,\n  measureDroppableContainers: noop\n};\nvar InternalContext = /*#__PURE__*/createContext(defaultInternalContext);\nvar PublicContext = /*#__PURE__*/createContext(defaultPublicContext);\nfunction getInitialState() {\n  return {\n    draggable: {\n      active: null,\n      initialCoordinates: {\n        x: 0,\n        y: 0\n      },\n      nodes: new Map(),\n      translate: {\n        x: 0,\n        y: 0\n      }\n    },\n    droppable: {\n      containers: new DroppableContainersMap()\n    }\n  };\n}\nfunction reducer(state, action) {\n  switch (action.type) {\n    case Action.DragStart:\n      return _objectSpread({}, state, {\n        draggable: _objectSpread({}, state.draggable, {\n          initialCoordinates: action.initialCoordinates,\n          active: action.active\n        })\n      });\n    case Action.DragMove:\n      if (!state.draggable.active) {\n        return state;\n      }\n      return _objectSpread({}, state, {\n        draggable: _objectSpread({}, state.draggable, {\n          translate: {\n            x: action.coordinates.x - state.draggable.initialCoordinates.x,\n            y: action.coordinates.y - state.draggable.initialCoordinates.y\n          }\n        })\n      });\n    case Action.DragEnd:\n    case Action.DragCancel:\n      return _objectSpread({}, state, {\n        draggable: _objectSpread({}, state.draggable, {\n          active: null,\n          initialCoordinates: {\n            x: 0,\n            y: 0\n          },\n          translate: {\n            x: 0,\n            y: 0\n          }\n        })\n      });\n    case Action.RegisterDroppable:\n      {\n        var element = action.element;\n        var id = element.id;\n        var containers = new DroppableContainersMap(state.droppable.containers);\n        containers.set(id, element);\n        return _objectSpread({}, state, {\n          droppable: _objectSpread({}, state.droppable, {\n            containers: containers\n          })\n        });\n      }\n    case Action.SetDroppableDisabled:\n      {\n        var _id = action.id,\n          _key2 = action.key,\n          disabled = action.disabled;\n        var _element = state.droppable.containers.get(_id);\n        if (!_element || _key2 !== _element.key) {\n          return state;\n        }\n        var _containers = new DroppableContainersMap(state.droppable.containers);\n        _containers.set(_id, _objectSpread({}, _element, {\n          disabled: disabled\n        }));\n        return _objectSpread({}, state, {\n          droppable: _objectSpread({}, state.droppable, {\n            containers: _containers\n          })\n        });\n      }\n    case Action.UnregisterDroppable:\n      {\n        var _id2 = action.id,\n          _key3 = action.key;\n        var _element2 = state.droppable.containers.get(_id2);\n        if (!_element2 || _key3 !== _element2.key) {\n          return state;\n        }\n        var _containers2 = new DroppableContainersMap(state.droppable.containers);\n        _containers2.delete(_id2);\n        return _objectSpread({}, state, {\n          droppable: _objectSpread({}, state.droppable, {\n            containers: _containers2\n          })\n        });\n      }\n    default:\n      {\n        return state;\n      }\n  }\n}\nfunction RestoreFocus(_ref) {\n  var disabled = _ref.disabled;\n  var _useContext = useContext(InternalContext),\n    active = _useContext.active,\n    activatorEvent = _useContext.activatorEvent,\n    draggableNodes = _useContext.draggableNodes;\n  var previousActivatorEvent = usePrevious(activatorEvent);\n  var previousActiveId = usePrevious(active == null ? void 0 : active.id); // Restore keyboard focus on the activator node\n\n  useEffect(function () {\n    if (disabled) {\n      return;\n    }\n    if (!activatorEvent && previousActivatorEvent && previousActiveId != null) {\n      if (!isKeyboardEvent(previousActivatorEvent)) {\n        return;\n      }\n      if (document.activeElement === previousActivatorEvent.target) {\n        // No need to restore focus\n        return;\n      }\n      var draggableNode = draggableNodes.get(previousActiveId);\n      if (!draggableNode) {\n        return;\n      }\n      var activatorNode = draggableNode.activatorNode,\n        node = draggableNode.node;\n      if (!activatorNode.current && !node.current) {\n        return;\n      }\n      requestAnimationFrame(function () {\n        for (var _i3 = 0, _arr2 = [activatorNode.current, node.current]; _i3 < _arr2.length; _i3++) {\n          var element = _arr2[_i3];\n          if (!element) {\n            continue;\n          }\n          var focusableNode = findFirstFocusableNode(element);\n          if (focusableNode) {\n            focusableNode.focus();\n            break;\n          }\n        }\n      });\n    }\n  }, [activatorEvent, disabled, draggableNodes, previousActiveId, previousActivatorEvent]);\n  return null;\n}\nfunction applyModifiers(modifiers, _ref) {\n  var transform = _ref.transform,\n    args = _objectWithoutProperties(_ref, [\"transform\"]);\n  return modifiers != null && modifiers.length ? modifiers.reduce(function (accumulator, modifier) {\n    return modifier(_objectSpread({\n      transform: accumulator\n    }, args));\n  }, transform) : transform;\n}\nfunction useMeasuringConfiguration(config) {\n  return useMemo(function () {\n    return {\n      draggable: _objectSpread({}, defaultMeasuringConfiguration.draggable, config == null ? void 0 : config.draggable),\n      droppable: _objectSpread({}, defaultMeasuringConfiguration.droppable, config == null ? void 0 : config.droppable),\n      dragOverlay: _objectSpread({}, defaultMeasuringConfiguration.dragOverlay, config == null ? void 0 : config.dragOverlay)\n    };\n  },\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  [config == null ? void 0 : config.draggable, config == null ? void 0 : config.droppable, config == null ? void 0 : config.dragOverlay]);\n}\nfunction useLayoutShiftScrollCompensation(_ref) {\n  var activeNode = _ref.activeNode,\n    measure = _ref.measure,\n    initialRect = _ref.initialRect,\n    _ref$config = _ref.config,\n    config = _ref$config === void 0 ? true : _ref$config;\n  var initialized = useRef(false);\n  var _ref7 = typeof config === 'boolean' ? {\n      x: config,\n      y: config\n    } : config,\n    x = _ref7.x,\n    y = _ref7.y;\n  useIsomorphicLayoutEffect(function () {\n    var disabled = !x && !y;\n    if (disabled || !activeNode) {\n      initialized.current = false;\n      return;\n    }\n    if (initialized.current || !initialRect) {\n      // Return early if layout shift scroll compensation was already attempted\n      // or if there is no initialRect to compare to.\n      return;\n    } // Get the most up to date node ref for the active draggable\n\n    var node = activeNode == null ? void 0 : activeNode.node.current;\n    if (!node || node.isConnected === false) {\n      // Return early if there is no attached node ref or if the node is\n      // disconnected from the document.\n      return;\n    }\n    var rect = measure(node);\n    var rectDelta = getRectDelta(rect, initialRect);\n    if (!x) {\n      rectDelta.x = 0;\n    }\n    if (!y) {\n      rectDelta.y = 0;\n    } // Only perform layout shift scroll compensation once\n\n    initialized.current = true;\n    if (Math.abs(rectDelta.x) > 0 || Math.abs(rectDelta.y) > 0) {\n      var firstScrollableAncestor = getFirstScrollableAncestor(node);\n      if (firstScrollableAncestor) {\n        firstScrollableAncestor.scrollBy({\n          top: rectDelta.y,\n          left: rectDelta.x\n        });\n      }\n    }\n  }, [activeNode, x, y, initialRect, measure]);\n}\nvar ActiveDraggableContext = /*#__PURE__*/createContext(_objectSpread({}, defaultCoordinates, {\n  scaleX: 1,\n  scaleY: 1\n}));\nvar Status;\n(function (Status) {\n  Status[Status[\"Uninitialized\"] = 0] = \"Uninitialized\";\n  Status[Status[\"Initializing\"] = 1] = \"Initializing\";\n  Status[Status[\"Initialized\"] = 2] = \"Initialized\";\n})(Status || (Status = {}));\nvar DndContext = /*#__PURE__*/memo(function DndContext(_ref) {\n  var _sensorContext$curren, _dragOverlay$nodeRef$, _dragOverlay$rect, _over$rect;\n  var id = _ref.id,\n    accessibility = _ref.accessibility,\n    _ref$autoScroll = _ref.autoScroll,\n    autoScroll = _ref$autoScroll === void 0 ? true : _ref$autoScroll,\n    children = _ref.children,\n    _ref$sensors = _ref.sensors,\n    sensors = _ref$sensors === void 0 ? defaultSensors : _ref$sensors,\n    _ref$collisionDetecti = _ref.collisionDetection,\n    collisionDetection = _ref$collisionDetecti === void 0 ? rectIntersection : _ref$collisionDetecti,\n    measuring = _ref.measuring,\n    modifiers = _ref.modifiers,\n    props = _objectWithoutProperties(_ref, [\"id\", \"accessibility\", \"autoScroll\", \"children\", \"sensors\", \"collisionDetection\", \"measuring\", \"modifiers\"]);\n  var store = useReducer(reducer, undefined, getInitialState);\n  var _store = _slicedToArray(store, 2),\n    state = _store[0],\n    dispatch = _store[1];\n  var _useDndMonitorProvide = useDndMonitorProvider(),\n    _useDndMonitorProvide2 = _slicedToArray(_useDndMonitorProvide, 2),\n    dispatchMonitorEvent = _useDndMonitorProvide2[0],\n    registerMonitorListener = _useDndMonitorProvide2[1];\n  var _useState11 = useState(Status.Uninitialized),\n    _useState12 = _slicedToArray(_useState11, 2),\n    status = _useState12[0],\n    setStatus = _useState12[1];\n  var isInitialized = status === Status.Initialized;\n  var _state$draggable = state.draggable,\n    activeId = _state$draggable.active,\n    draggableNodes = _state$draggable.nodes,\n    translate = _state$draggable.translate,\n    droppableContainers = state.droppable.containers;\n  var node = activeId ? draggableNodes.get(activeId) : null;\n  var activeRects = useRef({\n    initial: null,\n    translated: null\n  });\n  var active = useMemo(function () {\n    var _node$data;\n    return activeId != null ? {\n      id: activeId,\n      // It's possible for the active node to unmount while dragging\n      data: (_node$data = node == null ? void 0 : node.data) != null ? _node$data : defaultData,\n      rect: activeRects\n    } : null;\n  }, [activeId, node]);\n  var activeRef = useRef(null);\n  var _useState13 = useState(null),\n    _useState14 = _slicedToArray(_useState13, 2),\n    activeSensor = _useState14[0],\n    setActiveSensor = _useState14[1];\n  var _useState15 = useState(null),\n    _useState16 = _slicedToArray(_useState15, 2),\n    activatorEvent = _useState16[0],\n    setActivatorEvent = _useState16[1];\n  var latestProps = useLatestValue(props, Object.values(props));\n  var draggableDescribedById = useUniqueId(\"DndDescribedBy\", id);\n  var enabledDroppableContainers = useMemo(function () {\n    return droppableContainers.getEnabled();\n  }, [droppableContainers]);\n  var measuringConfiguration = useMeasuringConfiguration(measuring);\n  var _useDroppableMeasurin = useDroppableMeasuring(enabledDroppableContainers, {\n      dragging: isInitialized,\n      dependencies: [translate.x, translate.y],\n      config: measuringConfiguration.droppable\n    }),\n    droppableRects = _useDroppableMeasurin.droppableRects,\n    measureDroppableContainers = _useDroppableMeasurin.measureDroppableContainers,\n    measuringScheduled = _useDroppableMeasurin.measuringScheduled;\n  var activeNode = useCachedNode(draggableNodes, activeId);\n  var activationCoordinates = useMemo(function () {\n    return activatorEvent ? getEventCoordinates(activatorEvent) : null;\n  }, [activatorEvent]);\n  var autoScrollOptions = getAutoScrollerOptions();\n  var initialActiveNodeRect = useInitialRect(activeNode, measuringConfiguration.draggable.measure);\n  useLayoutShiftScrollCompensation({\n    activeNode: activeId ? draggableNodes.get(activeId) : null,\n    config: autoScrollOptions.layoutShiftCompensation,\n    initialRect: initialActiveNodeRect,\n    measure: measuringConfiguration.draggable.measure\n  });\n  var activeNodeRect = useRect(activeNode, measuringConfiguration.draggable.measure, initialActiveNodeRect);\n  var containerNodeRect = useRect(activeNode ? activeNode.parentElement : null);\n  var sensorContext = useRef({\n    activatorEvent: null,\n    active: null,\n    activeNode: activeNode,\n    collisionRect: null,\n    collisions: null,\n    droppableRects: droppableRects,\n    draggableNodes: draggableNodes,\n    draggingNode: null,\n    draggingNodeRect: null,\n    droppableContainers: droppableContainers,\n    over: null,\n    scrollableAncestors: [],\n    scrollAdjustedTranslate: null\n  });\n  var overNode = droppableContainers.getNodeFor((_sensorContext$curren = sensorContext.current.over) == null ? void 0 : _sensorContext$curren.id);\n  var dragOverlay = useDragOverlayMeasuring({\n    measure: measuringConfiguration.dragOverlay.measure\n  }); // Use the rect of the drag overlay if it is mounted\n\n  var draggingNode = (_dragOverlay$nodeRef$ = dragOverlay.nodeRef.current) != null ? _dragOverlay$nodeRef$ : activeNode;\n  var draggingNodeRect = isInitialized ? (_dragOverlay$rect = dragOverlay.rect) != null ? _dragOverlay$rect : activeNodeRect : null;\n  var usesDragOverlay = Boolean(dragOverlay.nodeRef.current && dragOverlay.rect); // The delta between the previous and new position of the draggable node\n  // is only relevant when there is no drag overlay\n\n  var nodeRectDelta = useRectDelta(usesDragOverlay ? null : activeNodeRect); // Get the window rect of the dragging node\n\n  var windowRect = useWindowRect(draggingNode ? getWindow(draggingNode) : null); // Get scrollable ancestors of the dragging node\n\n  var scrollableAncestors = useScrollableAncestors(isInitialized ? overNode != null ? overNode : activeNode : null);\n  var scrollableAncestorRects = useRects(scrollableAncestors); // Apply modifiers\n\n  var modifiedTranslate = applyModifiers(modifiers, {\n    transform: {\n      x: translate.x - nodeRectDelta.x,\n      y: translate.y - nodeRectDelta.y,\n      scaleX: 1,\n      scaleY: 1\n    },\n    activatorEvent: activatorEvent,\n    active: active,\n    activeNodeRect: activeNodeRect,\n    containerNodeRect: containerNodeRect,\n    draggingNodeRect: draggingNodeRect,\n    over: sensorContext.current.over,\n    overlayNodeRect: dragOverlay.rect,\n    scrollableAncestors: scrollableAncestors,\n    scrollableAncestorRects: scrollableAncestorRects,\n    windowRect: windowRect\n  });\n  var pointerCoordinates = activationCoordinates ? add(activationCoordinates, translate) : null;\n  var scrollOffsets = useScrollOffsets(scrollableAncestors); // Represents the scroll delta since dragging was initiated\n\n  var scrollAdjustment = useScrollOffsetsDelta(scrollOffsets); // Represents the scroll delta since the last time the active node rect was measured\n\n  var activeNodeScrollDelta = useScrollOffsetsDelta(scrollOffsets, [activeNodeRect]);\n  var scrollAdjustedTranslate = add(modifiedTranslate, scrollAdjustment);\n  var collisionRect = draggingNodeRect ? getAdjustedRect(draggingNodeRect, modifiedTranslate) : null;\n  var collisions = active && collisionRect ? collisionDetection({\n    active: active,\n    collisionRect: collisionRect,\n    droppableRects: droppableRects,\n    droppableContainers: enabledDroppableContainers,\n    pointerCoordinates: pointerCoordinates\n  }) : null;\n  var overId = getFirstCollision(collisions, 'id');\n  var _useState17 = useState(null),\n    _useState18 = _slicedToArray(_useState17, 2),\n    over = _useState18[0],\n    setOver = _useState18[1]; // When there is no drag overlay used, we need to account for the\n  // window scroll delta\n  var appliedTranslate = usesDragOverlay ? modifiedTranslate : add(modifiedTranslate, activeNodeScrollDelta);\n  var transform = adjustScale(appliedTranslate, (_over$rect = over == null ? void 0 : over.rect) != null ? _over$rect : null, activeNodeRect);\n  var instantiateSensor = useCallback(function (event, _ref2) {\n    var Sensor = _ref2.sensor,\n      options = _ref2.options;\n    if (activeRef.current == null) {\n      return;\n    }\n    var activeNode = draggableNodes.get(activeRef.current);\n    if (!activeNode) {\n      return;\n    }\n    var activatorEvent = event.nativeEvent;\n    var sensorInstance = new Sensor({\n      active: activeRef.current,\n      activeNode: activeNode,\n      event: activatorEvent,\n      options: options,\n      // Sensors need to be instantiated with refs for arguments that change over time\n      // otherwise they are frozen in time with the stale arguments\n      context: sensorContext,\n      onStart: function onStart(initialCoordinates) {\n        var id = activeRef.current;\n        if (id == null) {\n          return;\n        }\n        var draggableNode = draggableNodes.get(id);\n        if (!draggableNode) {\n          return;\n        }\n        var onDragStart = latestProps.current.onDragStart;\n        var event = {\n          active: {\n            id: id,\n            data: draggableNode.data,\n            rect: activeRects\n          }\n        };\n        unstable_batchedUpdates(function () {\n          onDragStart == null ? void 0 : onDragStart(event);\n          setStatus(Status.Initializing);\n          dispatch({\n            type: Action.DragStart,\n            initialCoordinates: initialCoordinates,\n            active: id\n          });\n          dispatchMonitorEvent({\n            type: 'onDragStart',\n            event: event\n          });\n        });\n      },\n      onMove: function onMove(coordinates) {\n        dispatch({\n          type: Action.DragMove,\n          coordinates: coordinates\n        });\n      },\n      onEnd: createHandler(Action.DragEnd),\n      onCancel: createHandler(Action.DragCancel)\n    });\n    unstable_batchedUpdates(function () {\n      setActiveSensor(sensorInstance);\n      setActivatorEvent(event.nativeEvent);\n    });\n    function createHandler(type) {\n      return /*#__PURE__*/function () {\n        var _handler = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n          var _sensorContext$curren2, active, collisions, over, scrollAdjustedTranslate, event, cancelDrop, shouldCancel;\n          return _regeneratorRuntime().wrap(function _callee$(_context) {\n            while (1) switch (_context.prev = _context.next) {\n              case 0:\n                _sensorContext$curren2 = sensorContext.current, active = _sensorContext$curren2.active, collisions = _sensorContext$curren2.collisions, over = _sensorContext$curren2.over, scrollAdjustedTranslate = _sensorContext$curren2.scrollAdjustedTranslate;\n                event = null;\n                if (!(active && scrollAdjustedTranslate)) {\n                  _context.next = 10;\n                  break;\n                }\n                cancelDrop = latestProps.current.cancelDrop;\n                event = {\n                  activatorEvent: activatorEvent,\n                  active: active,\n                  collisions: collisions,\n                  delta: scrollAdjustedTranslate,\n                  over: over\n                };\n                if (!(type === Action.DragEnd && typeof cancelDrop === 'function')) {\n                  _context.next = 10;\n                  break;\n                }\n                _context.next = 8;\n                return Promise.resolve(cancelDrop(event));\n              case 8:\n                shouldCancel = _context.sent;\n                if (shouldCancel) {\n                  type = Action.DragCancel;\n                }\n              case 10:\n                activeRef.current = null;\n                unstable_batchedUpdates(function () {\n                  dispatch({\n                    type: type\n                  });\n                  setStatus(Status.Uninitialized);\n                  setOver(null);\n                  setActiveSensor(null);\n                  setActivatorEvent(null);\n                  var eventName = type === Action.DragEnd ? 'onDragEnd' : 'onDragCancel';\n                  if (event) {\n                    var _handler2 = latestProps.current[eventName];\n                    _handler2 == null ? void 0 : _handler2(event);\n                    dispatchMonitorEvent({\n                      type: eventName,\n                      event: event\n                    });\n                  }\n                });\n              case 12:\n              case \"end\":\n                return _context.stop();\n            }\n          }, _callee);\n        }));\n        function handler() {\n          return _handler.apply(this, arguments);\n        }\n        return handler;\n      }();\n    }\n  },\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  [draggableNodes]);\n  var bindActivatorToSensorInstantiator = useCallback(function (handler, sensor) {\n    return function (event, active) {\n      var nativeEvent = event.nativeEvent;\n      var activeDraggableNode = draggableNodes.get(active);\n      if (\n      // Another sensor is already instantiating\n      activeRef.current !== null ||\n      // No active draggable\n      !activeDraggableNode ||\n      // Event has already been captured\n      nativeEvent.dndKit || nativeEvent.defaultPrevented) {\n        return;\n      }\n      var activationContext = {\n        active: activeDraggableNode\n      };\n      var shouldActivate = handler(event, sensor.options, activationContext);\n      if (shouldActivate === true) {\n        nativeEvent.dndKit = {\n          capturedBy: sensor.sensor\n        };\n        activeRef.current = active;\n        instantiateSensor(event, sensor);\n      }\n    };\n  }, [draggableNodes, instantiateSensor]);\n  var activators = useCombineActivators(sensors, bindActivatorToSensorInstantiator);\n  useSensorSetup(sensors);\n  useIsomorphicLayoutEffect(function () {\n    if (activeNodeRect && status === Status.Initializing) {\n      setStatus(Status.Initialized);\n    }\n  }, [activeNodeRect, status]);\n  useEffect(function () {\n    var onDragMove = latestProps.current.onDragMove;\n    var _sensorContext$curren3 = sensorContext.current,\n      active = _sensorContext$curren3.active,\n      activatorEvent = _sensorContext$curren3.activatorEvent,\n      collisions = _sensorContext$curren3.collisions,\n      over = _sensorContext$curren3.over;\n    if (!active || !activatorEvent) {\n      return;\n    }\n    var event = {\n      active: active,\n      activatorEvent: activatorEvent,\n      collisions: collisions,\n      delta: {\n        x: scrollAdjustedTranslate.x,\n        y: scrollAdjustedTranslate.y\n      },\n      over: over\n    };\n    unstable_batchedUpdates(function () {\n      onDragMove == null ? void 0 : onDragMove(event);\n      dispatchMonitorEvent({\n        type: 'onDragMove',\n        event: event\n      });\n    });\n  },\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  [scrollAdjustedTranslate.x, scrollAdjustedTranslate.y]);\n  useEffect(function () {\n    var _sensorContext$curren4 = sensorContext.current,\n      active = _sensorContext$curren4.active,\n      activatorEvent = _sensorContext$curren4.activatorEvent,\n      collisions = _sensorContext$curren4.collisions,\n      droppableContainers = _sensorContext$curren4.droppableContainers,\n      scrollAdjustedTranslate = _sensorContext$curren4.scrollAdjustedTranslate;\n    if (!active || activeRef.current == null || !activatorEvent || !scrollAdjustedTranslate) {\n      return;\n    }\n    var onDragOver = latestProps.current.onDragOver;\n    var overContainer = droppableContainers.get(overId);\n    var over = overContainer && overContainer.rect.current ? {\n      id: overContainer.id,\n      rect: overContainer.rect.current,\n      data: overContainer.data,\n      disabled: overContainer.disabled\n    } : null;\n    var event = {\n      active: active,\n      activatorEvent: activatorEvent,\n      collisions: collisions,\n      delta: {\n        x: scrollAdjustedTranslate.x,\n        y: scrollAdjustedTranslate.y\n      },\n      over: over\n    };\n    unstable_batchedUpdates(function () {\n      setOver(over);\n      onDragOver == null ? void 0 : onDragOver(event);\n      dispatchMonitorEvent({\n        type: 'onDragOver',\n        event: event\n      });\n    });\n  },\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  [overId]);\n  useIsomorphicLayoutEffect(function () {\n    sensorContext.current = {\n      activatorEvent: activatorEvent,\n      active: active,\n      activeNode: activeNode,\n      collisionRect: collisionRect,\n      collisions: collisions,\n      droppableRects: droppableRects,\n      draggableNodes: draggableNodes,\n      draggingNode: draggingNode,\n      draggingNodeRect: draggingNodeRect,\n      droppableContainers: droppableContainers,\n      over: over,\n      scrollableAncestors: scrollableAncestors,\n      scrollAdjustedTranslate: scrollAdjustedTranslate\n    };\n    activeRects.current = {\n      initial: draggingNodeRect,\n      translated: collisionRect\n    };\n  }, [active, activeNode, collisions, collisionRect, draggableNodes, draggingNode, draggingNodeRect, droppableRects, droppableContainers, over, scrollableAncestors, scrollAdjustedTranslate]);\n  useAutoScroller(_objectSpread({}, autoScrollOptions, {\n    delta: translate,\n    draggingRect: collisionRect,\n    pointerCoordinates: pointerCoordinates,\n    scrollableAncestors: scrollableAncestors,\n    scrollableAncestorRects: scrollableAncestorRects\n  }));\n  var publicContext = useMemo(function () {\n    var context = {\n      active: active,\n      activeNode: activeNode,\n      activeNodeRect: activeNodeRect,\n      activatorEvent: activatorEvent,\n      collisions: collisions,\n      containerNodeRect: containerNodeRect,\n      dragOverlay: dragOverlay,\n      draggableNodes: draggableNodes,\n      droppableContainers: droppableContainers,\n      droppableRects: droppableRects,\n      over: over,\n      measureDroppableContainers: measureDroppableContainers,\n      scrollableAncestors: scrollableAncestors,\n      scrollableAncestorRects: scrollableAncestorRects,\n      measuringConfiguration: measuringConfiguration,\n      measuringScheduled: measuringScheduled,\n      windowRect: windowRect\n    };\n    return context;\n  }, [active, activeNode, activeNodeRect, activatorEvent, collisions, containerNodeRect, dragOverlay, draggableNodes, droppableContainers, droppableRects, over, measureDroppableContainers, scrollableAncestors, scrollableAncestorRects, measuringConfiguration, measuringScheduled, windowRect]);\n  var internalContext = useMemo(function () {\n    var context = {\n      activatorEvent: activatorEvent,\n      activators: activators,\n      active: active,\n      activeNodeRect: activeNodeRect,\n      ariaDescribedById: {\n        draggable: draggableDescribedById\n      },\n      dispatch: dispatch,\n      draggableNodes: draggableNodes,\n      over: over,\n      measureDroppableContainers: measureDroppableContainers\n    };\n    return context;\n  }, [activatorEvent, activators, active, activeNodeRect, dispatch, draggableDescribedById, draggableNodes, over, measureDroppableContainers]);\n  return React.createElement(DndMonitorContext.Provider, {\n    value: registerMonitorListener\n  }, React.createElement(InternalContext.Provider, {\n    value: internalContext\n  }, React.createElement(PublicContext.Provider, {\n    value: publicContext\n  }, React.createElement(ActiveDraggableContext.Provider, {\n    value: transform\n  }, children)), React.createElement(RestoreFocus, {\n    disabled: (accessibility == null ? void 0 : accessibility.restoreFocus) === false\n  })), React.createElement(Accessibility, _objectSpread({}, accessibility, {\n    hiddenTextDescribedById: draggableDescribedById\n  })));\n  function getAutoScrollerOptions() {\n    var activeSensorDisablesAutoscroll = (activeSensor == null ? void 0 : activeSensor.autoScrollEnabled) === false;\n    var autoScrollGloballyDisabled = typeof autoScroll === 'object' ? autoScroll.enabled === false : autoScroll === false;\n    var enabled = isInitialized && !activeSensorDisablesAutoscroll && !autoScrollGloballyDisabled;\n    if (typeof autoScroll === 'object') {\n      return _objectSpread({}, autoScroll, {\n        enabled: enabled\n      });\n    }\n    return {\n      enabled: enabled\n    };\n  }\n});\nvar NullContext = /*#__PURE__*/createContext(null);\nvar defaultRole = 'button';\nvar ID_PREFIX = 'Droppable';\nfunction useDraggable(_ref) {\n  var id = _ref.id,\n    data = _ref.data,\n    _ref$disabled = _ref.disabled,\n    disabled = _ref$disabled === void 0 ? false : _ref$disabled,\n    attributes = _ref.attributes;\n  var key = useUniqueId(ID_PREFIX);\n  var _useContext2 = useContext(InternalContext),\n    activators = _useContext2.activators,\n    activatorEvent = _useContext2.activatorEvent,\n    active = _useContext2.active,\n    activeNodeRect = _useContext2.activeNodeRect,\n    ariaDescribedById = _useContext2.ariaDescribedById,\n    draggableNodes = _useContext2.draggableNodes,\n    over = _useContext2.over;\n  var _ref8 = attributes != null ? attributes : {},\n    _ref8$role = _ref8.role,\n    role = _ref8$role === void 0 ? defaultRole : _ref8$role,\n    _ref8$roleDescription = _ref8.roleDescription,\n    roleDescription = _ref8$roleDescription === void 0 ? 'draggable' : _ref8$roleDescription,\n    _ref8$tabIndex = _ref8.tabIndex,\n    tabIndex = _ref8$tabIndex === void 0 ? 0 : _ref8$tabIndex;\n  var isDragging = (active == null ? void 0 : active.id) === id;\n  var transform = useContext(isDragging ? ActiveDraggableContext : NullContext);\n  var _useNodeRef3 = useNodeRef(),\n    _useNodeRef4 = _slicedToArray(_useNodeRef3, 2),\n    node = _useNodeRef4[0],\n    setNodeRef = _useNodeRef4[1];\n  var _useNodeRef5 = useNodeRef(),\n    _useNodeRef6 = _slicedToArray(_useNodeRef5, 2),\n    activatorNode = _useNodeRef6[0],\n    setActivatorNodeRef = _useNodeRef6[1];\n  var listeners = useSyntheticListeners(activators, id);\n  var dataRef = useLatestValue(data);\n  useIsomorphicLayoutEffect(function () {\n    draggableNodes.set(id, {\n      id: id,\n      key: key,\n      node: node,\n      activatorNode: activatorNode,\n      data: dataRef\n    });\n    return function () {\n      var node = draggableNodes.get(id);\n      if (node && node.key === key) {\n        draggableNodes.delete(id);\n      }\n    };\n  },\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  [draggableNodes, id]);\n  var memoizedAttributes = useMemo(function () {\n    return {\n      role: role,\n      tabIndex: tabIndex,\n      'aria-disabled': disabled,\n      'aria-pressed': isDragging && role === defaultRole ? true : undefined,\n      'aria-roledescription': roleDescription,\n      'aria-describedby': ariaDescribedById.draggable\n    };\n  }, [disabled, role, tabIndex, isDragging, roleDescription, ariaDescribedById.draggable]);\n  return {\n    active: active,\n    activatorEvent: activatorEvent,\n    activeNodeRect: activeNodeRect,\n    attributes: memoizedAttributes,\n    isDragging: isDragging,\n    listeners: disabled ? undefined : listeners,\n    node: node,\n    over: over,\n    setNodeRef: setNodeRef,\n    setActivatorNodeRef: setActivatorNodeRef,\n    transform: transform\n  };\n}\nfunction useDndContext() {\n  return useContext(PublicContext);\n}\nvar ID_PREFIX$1 = 'Droppable';\nvar defaultResizeObserverConfig = {\n  timeout: 25\n};\nfunction useDroppable(_ref) {\n  var data = _ref.data,\n    _ref$disabled2 = _ref.disabled,\n    disabled = _ref$disabled2 === void 0 ? false : _ref$disabled2,\n    id = _ref.id,\n    resizeObserverConfig = _ref.resizeObserverConfig;\n  var key = useUniqueId(ID_PREFIX$1);\n  var _useContext3 = useContext(InternalContext),\n    active = _useContext3.active,\n    dispatch = _useContext3.dispatch,\n    over = _useContext3.over,\n    measureDroppableContainers = _useContext3.measureDroppableContainers;\n  var previous = useRef({\n    disabled: disabled\n  });\n  var resizeObserverConnected = useRef(false);\n  var rect = useRef(null);\n  var callbackId = useRef(null);\n  var _defaultResizeObserve = _objectSpread({}, defaultResizeObserverConfig, resizeObserverConfig),\n    resizeObserverDisabled = _defaultResizeObserve.disabled,\n    updateMeasurementsFor = _defaultResizeObserve.updateMeasurementsFor,\n    resizeObserverTimeout = _defaultResizeObserve.timeout;\n  var ids = useLatestValue(updateMeasurementsFor != null ? updateMeasurementsFor : id);\n  var handleResize = useCallback(function () {\n    if (!resizeObserverConnected.current) {\n      // ResizeObserver invokes the `handleResize` callback as soon as `observe` is called,\n      // assuming the element is rendered and displayed.\n      resizeObserverConnected.current = true;\n      return;\n    }\n    if (callbackId.current != null) {\n      clearTimeout(callbackId.current);\n    }\n    callbackId.current = setTimeout(function () {\n      measureDroppableContainers(Array.isArray(ids.current) ? ids.current : [ids.current]);\n      callbackId.current = null;\n    }, resizeObserverTimeout);\n  },\n  //eslint-disable-next-line react-hooks/exhaustive-deps\n  [resizeObserverTimeout]);\n  var resizeObserver = useResizeObserver({\n    callback: handleResize,\n    disabled: resizeObserverDisabled || !active\n  });\n  var handleNodeChange = useCallback(function (newElement, previousElement) {\n    if (!resizeObserver) {\n      return;\n    }\n    if (previousElement) {\n      resizeObserver.unobserve(previousElement);\n      resizeObserverConnected.current = false;\n    }\n    if (newElement) {\n      resizeObserver.observe(newElement);\n    }\n  }, [resizeObserver]);\n  var _useNodeRef7 = useNodeRef(handleNodeChange),\n    _useNodeRef8 = _slicedToArray(_useNodeRef7, 2),\n    nodeRef = _useNodeRef8[0],\n    setNodeRef = _useNodeRef8[1];\n  var dataRef = useLatestValue(data);\n  useEffect(function () {\n    if (!resizeObserver || !nodeRef.current) {\n      return;\n    }\n    resizeObserver.disconnect();\n    resizeObserverConnected.current = false;\n    resizeObserver.observe(nodeRef.current);\n  }, [nodeRef, resizeObserver]);\n  useIsomorphicLayoutEffect(function () {\n    dispatch({\n      type: Action.RegisterDroppable,\n      element: {\n        id: id,\n        key: key,\n        disabled: disabled,\n        node: nodeRef,\n        rect: rect,\n        data: dataRef\n      }\n    });\n    return function () {\n      return dispatch({\n        type: Action.UnregisterDroppable,\n        key: key,\n        id: id\n      });\n    };\n  },\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  [id]);\n  useEffect(function () {\n    if (disabled !== previous.current.disabled) {\n      dispatch({\n        type: Action.SetDroppableDisabled,\n        id: id,\n        key: key,\n        disabled: disabled\n      });\n      previous.current.disabled = disabled;\n    }\n  }, [id, key, disabled, dispatch]);\n  return {\n    active: active,\n    rect: rect,\n    isOver: (over == null ? void 0 : over.id) === id,\n    node: nodeRef,\n    over: over,\n    setNodeRef: setNodeRef\n  };\n}\nfunction AnimationManager(_ref) {\n  var animation = _ref.animation,\n    children = _ref.children;\n  var _useState19 = useState(null),\n    _useState20 = _slicedToArray(_useState19, 2),\n    clonedChildren = _useState20[0],\n    setClonedChildren = _useState20[1];\n  var _useState21 = useState(null),\n    _useState22 = _slicedToArray(_useState21, 2),\n    element = _useState22[0],\n    setElement = _useState22[1];\n  var previousChildren = usePrevious(children);\n  if (!children && !clonedChildren && previousChildren) {\n    setClonedChildren(previousChildren);\n  }\n  useIsomorphicLayoutEffect(function () {\n    if (!element) {\n      return;\n    }\n    var key = clonedChildren == null ? void 0 : clonedChildren.key;\n    var id = clonedChildren == null ? void 0 : clonedChildren.props.id;\n    if (key == null || id == null) {\n      setClonedChildren(null);\n      return;\n    }\n    Promise.resolve(animation(id, element)).then(function () {\n      setClonedChildren(null);\n    });\n  }, [animation, clonedChildren, element]);\n  return React.createElement(React.Fragment, null, children, clonedChildren ? cloneElement(clonedChildren, {\n    ref: setElement\n  }) : null);\n}\nvar defaultTransform = {\n  x: 0,\n  y: 0,\n  scaleX: 1,\n  scaleY: 1\n};\nfunction NullifiedContextProvider(_ref) {\n  var children = _ref.children;\n  return React.createElement(InternalContext.Provider, {\n    value: defaultInternalContext\n  }, React.createElement(ActiveDraggableContext.Provider, {\n    value: defaultTransform\n  }, children));\n}\nvar baseStyles = {\n  position: 'fixed',\n  touchAction: 'none'\n};\nvar defaultTransition = function defaultTransition(activatorEvent) {\n  var isKeyboardActivator = isKeyboardEvent(activatorEvent);\n  return isKeyboardActivator ? 'transform 250ms ease' : undefined;\n};\nvar PositionedOverlay = /*#__PURE__*/forwardRef(function (_ref, ref) {\n  var as = _ref.as,\n    activatorEvent = _ref.activatorEvent,\n    adjustScale = _ref.adjustScale,\n    children = _ref.children,\n    className = _ref.className,\n    rect = _ref.rect,\n    style = _ref.style,\n    transform = _ref.transform,\n    _ref$transition = _ref.transition,\n    transition = _ref$transition === void 0 ? defaultTransition : _ref$transition;\n  if (!rect) {\n    return null;\n  }\n  var scaleAdjustedTransform = adjustScale ? transform : _objectSpread({}, transform, {\n    scaleX: 1,\n    scaleY: 1\n  });\n  var styles = _objectSpread({}, baseStyles, {\n    width: rect.width,\n    height: rect.height,\n    top: rect.top,\n    left: rect.left,\n    transform: CSS.Transform.toString(scaleAdjustedTransform),\n    transformOrigin: adjustScale && activatorEvent ? getRelativeTransformOrigin(activatorEvent, rect) : undefined,\n    transition: typeof transition === 'function' ? transition(activatorEvent) : transition\n  }, style);\n  return React.createElement(as, {\n    className: className,\n    style: styles,\n    ref: ref\n  }, children);\n});\nvar defaultDropAnimationSideEffects = function defaultDropAnimationSideEffects(options) {\n  return function (_ref) {\n    var active = _ref.active,\n      dragOverlay = _ref.dragOverlay;\n    var originalStyles = {};\n    var styles = options.styles,\n      className = options.className;\n    if (styles != null && styles.active) {\n      for (var _i4 = 0, _Object$entries = Object.entries(styles.active); _i4 < _Object$entries.length; _i4++) {\n        var _Object$entries$_i = _slicedToArray(_Object$entries[_i4], 2),\n          _key4 = _Object$entries$_i[0],\n          value = _Object$entries$_i[1];\n        if (value === undefined) {\n          continue;\n        }\n        originalStyles[_key4] = active.node.style.getPropertyValue(_key4);\n        active.node.style.setProperty(_key4, value);\n      }\n    }\n    if (styles != null && styles.dragOverlay) {\n      for (var _i5 = 0, _Object$entries2 = Object.entries(styles.dragOverlay); _i5 < _Object$entries2.length; _i5++) {\n        var _Object$entries2$_i = _slicedToArray(_Object$entries2[_i5], 2),\n          _key5 = _Object$entries2$_i[0],\n          _value = _Object$entries2$_i[1];\n        if (_value === undefined) {\n          continue;\n        }\n        dragOverlay.node.style.setProperty(_key5, _value);\n      }\n    }\n    if (className != null && className.active) {\n      active.node.classList.add(className.active);\n    }\n    if (className != null && className.dragOverlay) {\n      dragOverlay.node.classList.add(className.dragOverlay);\n    }\n    return function cleanup() {\n      for (var _i6 = 0, _Object$entries3 = Object.entries(originalStyles); _i6 < _Object$entries3.length; _i6++) {\n        var _Object$entries3$_i = _slicedToArray(_Object$entries3[_i6], 2),\n          _key6 = _Object$entries3$_i[0],\n          _value2 = _Object$entries3$_i[1];\n        active.node.style.setProperty(_key6, _value2);\n      }\n      if (className != null && className.active) {\n        active.node.classList.remove(className.active);\n      }\n    };\n  };\n};\nvar defaultKeyframeResolver = function defaultKeyframeResolver(_ref2) {\n  var _ref2$transform = _ref2.transform,\n    initial = _ref2$transform.initial,\n    final = _ref2$transform.final;\n  return [{\n    transform: CSS.Transform.toString(initial)\n  }, {\n    transform: CSS.Transform.toString(final)\n  }];\n};\nvar defaultDropAnimationConfiguration = {\n  duration: 250,\n  easing: 'ease',\n  keyframes: defaultKeyframeResolver,\n  sideEffects: /*#__PURE__*/defaultDropAnimationSideEffects({\n    styles: {\n      active: {\n        opacity: '0'\n      }\n    }\n  })\n};\nfunction useDropAnimation(_ref3) {\n  var config = _ref3.config,\n    draggableNodes = _ref3.draggableNodes,\n    droppableContainers = _ref3.droppableContainers,\n    measuringConfiguration = _ref3.measuringConfiguration;\n  return useEvent(function (id, node) {\n    if (config === null) {\n      return;\n    }\n    var activeDraggable = draggableNodes.get(id);\n    if (!activeDraggable) {\n      return;\n    }\n    var activeNode = activeDraggable.node.current;\n    if (!activeNode) {\n      return;\n    }\n    var measurableNode = getMeasurableNode(node);\n    if (!measurableNode) {\n      return;\n    }\n    var _getWindow$getCompute2 = getWindow(node).getComputedStyle(node),\n      transform = _getWindow$getCompute2.transform;\n    var parsedTransform = parseTransform(transform);\n    if (!parsedTransform) {\n      return;\n    }\n    var animation = typeof config === 'function' ? config : createDefaultDropAnimation(config);\n    scrollIntoViewIfNeeded(activeNode, measuringConfiguration.draggable.measure);\n    return animation({\n      active: {\n        id: id,\n        data: activeDraggable.data,\n        node: activeNode,\n        rect: measuringConfiguration.draggable.measure(activeNode)\n      },\n      draggableNodes: draggableNodes,\n      dragOverlay: {\n        node: node,\n        rect: measuringConfiguration.dragOverlay.measure(measurableNode)\n      },\n      droppableContainers: droppableContainers,\n      measuringConfiguration: measuringConfiguration,\n      transform: parsedTransform\n    });\n  });\n}\nfunction createDefaultDropAnimation(options) {\n  var _defaultDropAnimation = _objectSpread({}, defaultDropAnimationConfiguration, options),\n    duration = _defaultDropAnimation.duration,\n    easing = _defaultDropAnimation.easing,\n    sideEffects = _defaultDropAnimation.sideEffects,\n    keyframes = _defaultDropAnimation.keyframes;\n  return function (_ref4) {\n    var active = _ref4.active,\n      dragOverlay = _ref4.dragOverlay,\n      transform = _ref4.transform,\n      rest = _objectWithoutProperties(_ref4, [\"active\", \"dragOverlay\", \"transform\"]);\n    if (!duration) {\n      // Do not animate if animation duration is zero.\n      return;\n    }\n    var delta = {\n      x: dragOverlay.rect.left - active.rect.left,\n      y: dragOverlay.rect.top - active.rect.top\n    };\n    var scale = {\n      scaleX: transform.scaleX !== 1 ? active.rect.width * transform.scaleX / dragOverlay.rect.width : 1,\n      scaleY: transform.scaleY !== 1 ? active.rect.height * transform.scaleY / dragOverlay.rect.height : 1\n    };\n    var finalTransform = _objectSpread({\n      x: transform.x - delta.x,\n      y: transform.y - delta.y\n    }, scale);\n    var animationKeyframes = keyframes(_objectSpread({}, rest, {\n      active: active,\n      dragOverlay: dragOverlay,\n      transform: {\n        initial: transform,\n        final: finalTransform\n      }\n    }));\n    var _animationKeyframes = _slicedToArray(animationKeyframes, 1),\n      firstKeyframe = _animationKeyframes[0];\n    var lastKeyframe = animationKeyframes[animationKeyframes.length - 1];\n    if (JSON.stringify(firstKeyframe) === JSON.stringify(lastKeyframe)) {\n      // The start and end keyframes are the same, infer that there is no animation needed.\n      return;\n    }\n    var cleanup = sideEffects == null ? void 0 : sideEffects(_objectSpread({\n      active: active,\n      dragOverlay: dragOverlay\n    }, rest));\n    var animation = dragOverlay.node.animate(animationKeyframes, {\n      duration: duration,\n      easing: easing,\n      fill: 'forwards'\n    });\n    return new Promise(function (resolve) {\n      animation.onfinish = function () {\n        cleanup == null ? void 0 : cleanup();\n        resolve();\n      };\n    });\n  };\n}\nvar key = 0;\nfunction useKey(id) {\n  return useMemo(function () {\n    if (id == null) {\n      return;\n    }\n    key++;\n    return key;\n  }, [id]);\n}\nvar DragOverlay = /*#__PURE__*/React.memo(function (_ref) {\n  var _ref$adjustScale = _ref.adjustScale,\n    adjustScale = _ref$adjustScale === void 0 ? false : _ref$adjustScale,\n    children = _ref.children,\n    dropAnimationConfig = _ref.dropAnimation,\n    style = _ref.style,\n    transition = _ref.transition,\n    modifiers = _ref.modifiers,\n    _ref$wrapperElement = _ref.wrapperElement,\n    wrapperElement = _ref$wrapperElement === void 0 ? 'div' : _ref$wrapperElement,\n    className = _ref.className,\n    _ref$zIndex = _ref.zIndex,\n    zIndex = _ref$zIndex === void 0 ? 999 : _ref$zIndex;\n  var _useDndContext = useDndContext(),\n    activatorEvent = _useDndContext.activatorEvent,\n    active = _useDndContext.active,\n    activeNodeRect = _useDndContext.activeNodeRect,\n    containerNodeRect = _useDndContext.containerNodeRect,\n    draggableNodes = _useDndContext.draggableNodes,\n    droppableContainers = _useDndContext.droppableContainers,\n    dragOverlay = _useDndContext.dragOverlay,\n    over = _useDndContext.over,\n    measuringConfiguration = _useDndContext.measuringConfiguration,\n    scrollableAncestors = _useDndContext.scrollableAncestors,\n    scrollableAncestorRects = _useDndContext.scrollableAncestorRects,\n    windowRect = _useDndContext.windowRect;\n  var transform = useContext(ActiveDraggableContext);\n  var key = useKey(active == null ? void 0 : active.id);\n  var modifiedTransform = applyModifiers(modifiers, {\n    activatorEvent: activatorEvent,\n    active: active,\n    activeNodeRect: activeNodeRect,\n    containerNodeRect: containerNodeRect,\n    draggingNodeRect: dragOverlay.rect,\n    over: over,\n    overlayNodeRect: dragOverlay.rect,\n    scrollableAncestors: scrollableAncestors,\n    scrollableAncestorRects: scrollableAncestorRects,\n    transform: transform,\n    windowRect: windowRect\n  });\n  var initialRect = useInitialValue(activeNodeRect);\n  var dropAnimation = useDropAnimation({\n    config: dropAnimationConfig,\n    draggableNodes: draggableNodes,\n    droppableContainers: droppableContainers,\n    measuringConfiguration: measuringConfiguration\n  }); // We need to wait for the active node to be measured before connecting the drag overlay ref\n  // otherwise collisions can be computed against a mispositioned drag overlay\n\n  var ref = initialRect ? dragOverlay.setRef : undefined;\n  return React.createElement(NullifiedContextProvider, null, React.createElement(AnimationManager, {\n    animation: dropAnimation\n  }, active && key ? React.createElement(PositionedOverlay, {\n    key: key,\n    id: active.id,\n    ref: ref,\n    as: wrapperElement,\n    activatorEvent: activatorEvent,\n    adjustScale: adjustScale,\n    className: className,\n    transition: transition,\n    rect: initialRect,\n    style: _objectSpread({\n      zIndex: zIndex\n    }, style),\n    transform: modifiedTransform\n  }, children) : null));\n});\nexport { AutoScrollActivator, DndContext, DragOverlay, KeyboardCode, KeyboardSensor, MeasuringFrequency, MeasuringStrategy, MouseSensor, PointerSensor, TouchSensor, TraversalOrder, applyModifiers, closestCenter, closestCorners, defaultAnnouncements, defaultCoordinates, defaultDropAnimationConfiguration as defaultDropAnimation, defaultDropAnimationSideEffects, defaultScreenReaderInstructions, getClientRect, getFirstCollision, getScrollableAncestors, pointerWithin, rectIntersection, useDndContext, useDndMonitor, useDraggable, useDroppable, useSensor, useSensors };","map":null,"metadata":{},"sourceType":"module"}
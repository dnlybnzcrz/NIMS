{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\User\\\\Desktop\\\\NIMS\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"C:\\\\Users\\\\User\\\\Desktop\\\\NIMS\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport _toConsumableArray from \"C:\\\\Users\\\\User\\\\Desktop\\\\NIMS\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport { useMemo, useLayoutEffect, useEffect, useRef, useCallback } from 'react';\nfunction useCombinedRefs() {\n  for (var _len = arguments.length, refs = new Array(_len), _key = 0; _key < _len; _key++) {\n    refs[_key] = arguments[_key];\n  }\n  return useMemo(function () {\n    return function (node) {\n      refs.forEach(function (ref) {\n        return ref(node);\n      });\n    };\n  },\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  refs);\n}\n\n// https://github.com/facebook/react/blob/master/packages/shared/ExecutionEnvironment.js\nvar canUseDOM = typeof window !== 'undefined' && typeof window.document !== 'undefined' && typeof window.document.createElement !== 'undefined';\nfunction isWindow(element) {\n  var elementString = Object.prototype.toString.call(element);\n  return elementString === '[object Window]' ||\n  // In Electron context the Window object serializes to [object global]\n  elementString === '[object global]';\n}\nfunction isNode(node) {\n  return 'nodeType' in node;\n}\nfunction getWindow(target) {\n  var _target$ownerDocument, _target$ownerDocument2;\n  if (!target) {\n    return window;\n  }\n  if (isWindow(target)) {\n    return target;\n  }\n  if (!isNode(target)) {\n    return window;\n  }\n  return (_target$ownerDocument = (_target$ownerDocument2 = target.ownerDocument) == null ? void 0 : _target$ownerDocument2.defaultView) != null ? _target$ownerDocument : window;\n}\nfunction isDocument(node) {\n  var _getWindow = getWindow(node),\n    Document = _getWindow.Document;\n  return node instanceof Document;\n}\nfunction isHTMLElement(node) {\n  if (isWindow(node)) {\n    return false;\n  }\n  return node instanceof getWindow(node).HTMLElement;\n}\nfunction isSVGElement(node) {\n  return node instanceof getWindow(node).SVGElement;\n}\nfunction getOwnerDocument(target) {\n  if (!target) {\n    return document;\n  }\n  if (isWindow(target)) {\n    return target.document;\n  }\n  if (!isNode(target)) {\n    return document;\n  }\n  if (isDocument(target)) {\n    return target;\n  }\n  if (isHTMLElement(target) || isSVGElement(target)) {\n    return target.ownerDocument;\n  }\n  return document;\n}\n\n/**\r\n * A hook that resolves to useEffect on the server and useLayoutEffect on the client\r\n * @param callback {function} Callback function that is invoked when the dependencies of the hook change\r\n */\n\nvar useIsomorphicLayoutEffect = canUseDOM ? useLayoutEffect : useEffect;\nfunction useEvent(handler) {\n  var handlerRef = useRef(handler);\n  useIsomorphicLayoutEffect(function () {\n    handlerRef.current = handler;\n  });\n  return useCallback(function () {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    return handlerRef.current == null ? void 0 : handlerRef.current.apply(handlerRef, args);\n  }, []);\n}\nfunction useInterval() {\n  var intervalRef = useRef(null);\n  var set = useCallback(function (listener, duration) {\n    intervalRef.current = setInterval(listener, duration);\n  }, []);\n  var clear = useCallback(function () {\n    if (intervalRef.current !== null) {\n      clearInterval(intervalRef.current);\n      intervalRef.current = null;\n    }\n  }, []);\n  return [set, clear];\n}\nfunction useLatestValue(value, dependencies) {\n  if (dependencies === void 0) {\n    dependencies = [value];\n  }\n  var valueRef = useRef(value);\n  useIsomorphicLayoutEffect(function () {\n    if (valueRef.current !== value) {\n      valueRef.current = value;\n    }\n  }, dependencies);\n  return valueRef;\n}\nfunction useLazyMemo(callback, dependencies) {\n  var valueRef = useRef();\n  return useMemo(function () {\n    var newValue = callback(valueRef.current);\n    valueRef.current = newValue;\n    return newValue;\n  }, // eslint-disable-next-line react-hooks/exhaustive-deps\n  _toConsumableArray(dependencies));\n}\nfunction useNodeRef(onChange) {\n  var onChangeHandler = useEvent(onChange);\n  var node = useRef(null);\n  var setNodeRef = useCallback(function (element) {\n    if (element !== node.current) {\n      onChangeHandler == null ? void 0 : onChangeHandler(element, node.current);\n    }\n    node.current = element;\n  },\n  //eslint-disable-next-line\n  []);\n  return [node, setNodeRef];\n}\nfunction usePrevious(value) {\n  var ref = useRef();\n  useEffect(function () {\n    ref.current = value;\n  }, [value]);\n  return ref.current;\n}\nvar ids = {};\nfunction useUniqueId(prefix, value) {\n  return useMemo(function () {\n    if (value) {\n      return value;\n    }\n    var id = ids[prefix] == null ? 0 : ids[prefix] + 1;\n    ids[prefix] = id;\n    return prefix + \"-\" + id;\n  }, [prefix, value]);\n}\nfunction createAdjustmentFn(modifier) {\n  return function (object) {\n    for (var _len = arguments.length, adjustments = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      adjustments[_key - 1] = arguments[_key];\n    }\n    return adjustments.reduce(function (accumulator, adjustment) {\n      var entries = Object.entries(adjustment);\n      for (var _i = 0, _entries = entries; _i < _entries.length; _i++) {\n        var _entries$_i = _slicedToArray(_entries[_i], 2),\n          key = _entries$_i[0],\n          valueAdjustment = _entries$_i[1];\n        var value = accumulator[key];\n        if (value != null) {\n          accumulator[key] = value + modifier * valueAdjustment;\n        }\n      }\n      return accumulator;\n    }, _objectSpread({}, object));\n  };\n}\nvar add = /*#__PURE__*/createAdjustmentFn(1);\nvar subtract = /*#__PURE__*/createAdjustmentFn(-1);\nfunction hasViewportRelativeCoordinates(event) {\n  return 'clientX' in event && 'clientY' in event;\n}\nfunction isKeyboardEvent(event) {\n  if (!event) {\n    return false;\n  }\n  var _getWindow2 = getWindow(event.target),\n    KeyboardEvent = _getWindow2.KeyboardEvent;\n  return KeyboardEvent && event instanceof KeyboardEvent;\n}\nfunction isTouchEvent(event) {\n  if (!event) {\n    return false;\n  }\n  var _getWindow3 = getWindow(event.target),\n    TouchEvent = _getWindow3.TouchEvent;\n  return TouchEvent && event instanceof TouchEvent;\n}\n\n/**\r\n * Returns the normalized x and y coordinates for mouse and touch events.\r\n */\n\nfunction getEventCoordinates(event) {\n  if (isTouchEvent(event)) {\n    if (event.touches && event.touches.length) {\n      var _event$touches$ = event.touches[0],\n        x = _event$touches$.clientX,\n        y = _event$touches$.clientY;\n      return {\n        x: x,\n        y: y\n      };\n    } else if (event.changedTouches && event.changedTouches.length) {\n      var _event$changedTouches = event.changedTouches[0],\n        _x = _event$changedTouches.clientX,\n        _y = _event$changedTouches.clientY;\n      return {\n        x: _x,\n        y: _y\n      };\n    }\n  }\n  if (hasViewportRelativeCoordinates(event)) {\n    return {\n      x: event.clientX,\n      y: event.clientY\n    };\n  }\n  return null;\n}\nvar CSS = /*#__PURE__*/Object.freeze({\n  Translate: {\n    toString: function toString(transform) {\n      if (!transform) {\n        return;\n      }\n      var x = transform.x,\n        y = transform.y;\n      return \"translate3d(\" + (x ? Math.round(x) : 0) + \"px, \" + (y ? Math.round(y) : 0) + \"px, 0)\";\n    }\n  },\n  Scale: {\n    toString: function toString(transform) {\n      if (!transform) {\n        return;\n      }\n      var scaleX = transform.scaleX,\n        scaleY = transform.scaleY;\n      return \"scaleX(\" + scaleX + \") scaleY(\" + scaleY + \")\";\n    }\n  },\n  Transform: {\n    toString: function toString(transform) {\n      if (!transform) {\n        return;\n      }\n      return [CSS.Translate.toString(transform), CSS.Scale.toString(transform)].join(' ');\n    }\n  },\n  Transition: {\n    toString: function toString(_ref) {\n      var property = _ref.property,\n        duration = _ref.duration,\n        easing = _ref.easing;\n      return property + \" \" + duration + \"ms \" + easing;\n    }\n  }\n});\nvar SELECTOR = 'a,frame,iframe,input:not([type=hidden]):not(:disabled),select:not(:disabled),textarea:not(:disabled),button:not(:disabled),*[tabindex]';\nfunction findFirstFocusableNode(element) {\n  if (element.matches(SELECTOR)) {\n    return element;\n  }\n  return element.querySelector(SELECTOR);\n}\nexport { CSS, add, canUseDOM, findFirstFocusableNode, getEventCoordinates, getOwnerDocument, getWindow, hasViewportRelativeCoordinates, isDocument, isHTMLElement, isKeyboardEvent, isNode, isSVGElement, isTouchEvent, isWindow, subtract, useCombinedRefs, useEvent, useInterval, useIsomorphicLayoutEffect, useLatestValue, useLazyMemo, useNodeRef, usePrevious, useUniqueId };","map":null,"metadata":{},"sourceType":"module"}